{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Directive, Input, Output, HostListener, Component, ViewEncapsulation, ViewChild, HostBinding, forwardRef, Host, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, query, style, stagger, animate, keyframes } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"hueSlider\"];\nconst _c1 = [\"alphaSlider\"];\nfunction ColorPickerComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"newValue\", function ColorPickerComponent_div_2_Template_div_newValue_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSliderChange(\"saturation-lightness\", $event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11);\n    i0.ɵɵelement(2, \"div\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r2.hueSliderColor);\n    i0.ɵɵproperty(\"rgX\", 1)(\"rgY\", 1);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"top\", ctx_r2.slider == null ? null : ctx_r2.slider.v, \"px\")(\"left\", ctx_r2.slider == null ? null : ctx_r2.slider.s, \"px\");\n  }\n}\nfunction ColorPickerComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelement(1, \"div\", 13)(2, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r2.selectedColor);\n  }\n}\nfunction ColorPickerComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15, 1);\n    i0.ɵɵlistener(\"newValue\", function ColorPickerComponent_div_6_Template_div_newValue_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSliderChange(\"hue\", $event));\n    });\n    i0.ɵɵelementStart(2, \"div\", 16)(3, \"div\");\n    i0.ɵɵelement(4, \"div\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rgX\", 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"left\", ctx_r2.slider == null ? null : ctx_r2.slider.h, \"px\");\n  }\n}\nfunction ColorPickerComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 17, 2);\n    i0.ɵɵlistener(\"newValue\", function ColorPickerComponent_div_7_Template_div_newValue_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onSliderChange(\"alpha\", $event));\n    });\n    i0.ɵɵelement(2, \"div\", 18);\n    i0.ɵɵelementStart(3, \"div\", 16)(4, \"div\");\n    i0.ɵɵelement(5, \"div\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rgX\", 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.getBackgroundColor(ctx_r2.alphaSliderColor));\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"left\", ctx_r2.slider == null ? null : ctx_r2.slider.a, \"px\");\n  }\n}\nconst _c2 = [\"dialog\"];\nconst _c3 = a0 => ({\n  background: a0\n});\nfunction PanelComponent_ng_container_2_ng_container_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 12);\n  }\n}\nfunction PanelComponent_ng_container_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 9)(2, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_2_ng_container_2_Template_div_click_2_listener() {\n      const color_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onColorClick(color_r2));\n    });\n    i0.ɵɵtemplate(3, PanelComponent_ng_container_2_ng_container_2_div_3_Template, 1, 0, \"div\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const color_r2 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"colornull\", !color_r2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.getBackgroundColor(color_r2));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i_r4 == ctx_r2.indexSeleccionado);\n  }\n}\nfunction PanelComponent_ng_container_2_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.getBackgroundColor(ctx_r2.color));\n  }\n}\nfunction PanelComponent_ng_container_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_2_div_3_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.addColor());\n    });\n    i0.ɵɵtemplate(1, PanelComponent_ng_container_2_div_3_div_1_Template, 1, 1, \"div\", 14);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(2, \"svg\", 15);\n    i0.ɵɵelement(3, \"path\", 16)(4, \"path\", 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.indexSeleccionado === undefined);\n  }\n}\nfunction PanelComponent_ng_container_2_color_picker_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"color-picker\", 19);\n    i0.ɵɵlistener(\"colorChange\", function PanelComponent_ng_container_2_color_picker_4_Template_color_picker_colorChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onChangeColorPicker($event));\n    })(\"onAlphaChange\", function PanelComponent_ng_container_2_color_picker_4_Template_color_picker_onAlphaChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.onAlphaChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"controls\", ctx_r2.colorPickerControls)(\"color\", ctx_r2.hsva);\n  }\n}\nfunction PanelComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵtemplate(2, PanelComponent_ng_container_2_ng_container_2_Template, 4, 4, \"ng-container\", 6)(3, PanelComponent_ng_container_2_div_3_Template, 5, 1, \"div\", 7)(4, PanelComponent_ng_container_2_color_picker_4_Template, 1, 2, \"color-picker\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"@colorsAnimation\", ctx_r2.colorsAnimationEffect);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.palette);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.hideColorPicker && ctx_r2.colorPickerControls != \"only-alpha\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.hideColorPicker && ctx_r2.colorPickerControls == \"only-alpha\");\n  }\n}\nfunction PanelComponent_ng_container_3_ng_container_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 12);\n  }\n}\nfunction PanelComponent_ng_container_3_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 9)(2, \"div\", 25);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_3_ng_container_7_Template_div_click_2_listener() {\n      const variant_r9 = i0.ɵɵrestoreView(_r8).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.changeColor(variant_r9));\n    });\n    i0.ɵɵtemplate(3, PanelComponent_ng_container_3_ng_container_7_div_3_Template, 1, 0, \"div\", 11);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const variant_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassProp(\"colornull\", !variant_r9);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c3, variant_r9));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isSelected(variant_r9));\n  }\n}\nfunction PanelComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 5)(2, \"div\", 20)(3, \"div\", 21);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_3_Template_div_click_3_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClickBack());\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(4, \"svg\", 22);\n    i0.ɵɵelement(5, \"path\", 23)(6, \"path\", 24);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(7, PanelComponent_ng_container_3_ng_container_7_Template, 4, 6, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"@colorsAnimation\", ctx_r2.colorsAnimationEffect);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.variants);\n  }\n}\nfunction PanelComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 26)(2, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_4_Template_div_click_2_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClickBack());\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(3, \"svg\", 22);\n    i0.ɵɵelement(4, \"path\", 23)(5, \"path\", 24);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(6, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_4_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitClose(\"cancel\"));\n    });\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function PanelComponent_ng_container_4_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitClose(\"accept\"));\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 29)(11, \"color-picker\", 30);\n    i0.ɵɵlistener(\"sliderChange\", function PanelComponent_ng_container_4_Template_color_picker_sliderChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onChangeColorPicker($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.cancelLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.acceptLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"controls\", ctx_r2.colorPickerControls)(\"color\", ctx_r2.hsva);\n  }\n}\nfunction PanelComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"p\", 32);\n    i0.ɵɵlistener(\"click\", function PanelComponent_div_5_Template_p_click_1_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.nextFormat());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 33)(4, \"input\", 34, 1);\n    i0.ɵɵlistener(\"keyup\", function PanelComponent_div_5_Template_input_keyup_4_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const paintInput_r12 = i0.ɵɵreference(5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.changeColorManual(paintInput_r12.value));\n    })(\"keydown.enter\", function PanelComponent_div_5_Template_input_keydown_enter_4_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitClose(\"accept\"));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.colorFormats[ctx_r2.format]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"font-size\", ctx_r2.color && ctx_r2.color.length > 23 ? 9 : 10, \"px\")(\"letter-spacing\", ctx_r2.color && ctx_r2.color.length > 16 ? 0 : 1.5, \"px\");\n    i0.ɵɵproperty(\"placeholder\", ctx_r2.placeholder)(\"value\", ctx_r2.color);\n  }\n}\nconst formats = ['hex', 'rgba', 'hsla', 'cmyk'];\nvar ColorFormats = /*#__PURE__*/function (ColorFormats) {\n  ColorFormats[ColorFormats[\"HEX\"] = 0] = \"HEX\";\n  ColorFormats[ColorFormats[\"RGBA\"] = 1] = \"RGBA\";\n  ColorFormats[ColorFormats[\"HSLA\"] = 2] = \"HSLA\";\n  ColorFormats[ColorFormats[\"CMYK\"] = 3] = \"CMYK\";\n  return ColorFormats;\n}(ColorFormats || {});\nconst defaultColors = [{\n  color: \"rojo\",\n  preview: \"#E57373\",\n  variants: [\"#FFEBEE\", \"#FFCDD2\", \"#EF9A9A\", \"#E57373\", \"#EF5350\", \"#F44336\", \"#E53935\", \"#D32F2F\", \"#C62828\"]\n}, {\n  color: \"rosa\",\n  preview: \"#F06292\",\n  variants: [\"#FCE4EC\", \"#F8BBD0\", \"#F48FB1\", \"#F06292\", \"#EC407A\", \"#E91E63\", \"#D81B60\", \"#C2185B\", \"#AD1457\"]\n}, {\n  color: \"purpura\",\n  preview: \"#BA68C8\",\n  variants: [\"#F3E5F5\", \"#E1BEE7\", \"#CE93D8\", \"#BA68C8\", \"#AB47BC\", \"#9C27B0\", \"#8E24AA\", \"#7B1FA2\", \"#6A1B9A\"]\n}, {\n  color: \"purpura oscuro\",\n  preview: \"#9575CD\",\n  variants: [\"#EDE7F6\", \"#D1C4E9\", \"#B39DDB\", \"#9575CD\", \"#7E57C2\", \"#673AB7\", \"#5E35B1\", \"#512DA8\", \"#4527A0\"]\n}, {\n  color: \"indigo\",\n  preview: \"#7986CB\",\n  variants: [\"#E8EAF6\", \"#C5CAE9\", \"#9FA8DA\", \"#7986CB\", \"#5C6BC0\", \"#3F51B5\", \"#3949AB\", \"#303F9F\", \"#283593\"]\n}, {\n  color: \"azul\",\n  preview: \"#64B5F6\",\n  variants: [\"#E3F2FD\", \"#BBDEFB\", \"#90CAF9\", \"#64B5F6\", \"#42A5F5\", \"#2196F3\", \"#1E88E5\", \"#1976D2\", \"#1565C0\"]\n}, {\n  color: \"celeste\",\n  preview: \"#4FC3F7\",\n  variants: [\"#E1F5FE\", \"#B3E5FC\", \"#81D4FA\", \"#4FC3F7\", \"#29B6F6\", \"#03A9F4\", \"#039BE5\", \"#0288D1\", \"#0277BD\"]\n}, {\n  color: \"cyan\",\n  preview: \"#4DD0E1\",\n  variants: [\"#E0F7FA\", \"#B2EBF2\", \"#80DEEA\", \"#4DD0E1\", \"#26C6DA\", \"#00BCD4\", \"#00ACC1\", \"#0097A7\", \"#00838F\"]\n}, {\n  color: \"color\",\n  preview: \"#4DB6AC\",\n  variants: [\"#E0F2F1\", \"#B2DFDB\", \"#80CBC4\", \"#4DB6AC\", \"#26A69A\", \"#009688\", \"#00897B\", \"#00796B\", \"#00695C\"]\n}, {\n  color: \"verde\",\n  preview: \"#81C784\",\n  variants: [\"#E8F5E9\", \"#C8E6C9\", \"#A5D6A7\", \"#81C784\", \"#66BB6A\", \"#4CAF50\", \"#43A047\", \"#388E3C\", \"#2E7D32\"]\n}, {\n  color: \"verde claro\",\n  preview: \"#AED581\",\n  variants: [\"#F1F8E9\", \"#DCEDC8\", \"#C5E1A5\", \"#AED581\", \"#9CCC65\", \"#8BC34A\", \"#7CB342\", \"#689F38\", \"#558B2F\"]\n}, {\n  color: \"lima\",\n  preview: \"#DCE775\",\n  variants: [\"#F9FBE7\", \"#F0F4C3\", \"#E6EE9C\", \"#DCE775\", \"#D4E157\", \"#CDDC39\", \"#C0CA33\", \"#AFB42B\", \"#9E9D24\"]\n}, {\n  color: \"amarillo\",\n  preview: \"#FFF176\",\n  variants: [\"#FFFDE7\", \"#FFF9C4\", \"#FFF59D\", \"#FFF176\", \"#FFEE58\", \"#FFEB3B\", \"#FDD835\", \"#FBC02D\", \"#F9A825\"]\n}, {\n  color: \"ambar\",\n  preview: \"#FFD54F\",\n  variants: [\"#FFF8E1\", \"#FFECB3\", \"#FFE082\", \"#FFD54F\", \"#FFCA28\", \"#FFC107\", \"#FFB300\", \"#FFA000\", \"#FF8F00\"]\n}, {\n  color: \"naranja\",\n  preview: \"#FFB74D\",\n  variants: [\"#FFF3E0\", \"#FFE0B2\", \"#FFCC80\", \"#FFB74D\", \"#FFA726\", \"#FF9800\", \"#FB8C00\", \"#F57C00\", \"#EF6C00\"]\n}, {\n  color: \"naranja oscuro\",\n  preview: \"#FF8A65\",\n  variants: [\"#FBE9E7\", \"#FFCCBC\", \"#FFAB91\", \"#FF8A65\", \"#FF7043\", \"#FF5722\", \"#F4511E\", \"#E64A19\", \"#D84315\"]\n}, {\n  color: \"marron\",\n  preview: \"#A1887F\",\n  variants: [\"#EFEBE9\", \"#D7CCC8\", \"#BCAAA4\", \"#A1887F\", \"#8D6E63\", \"#795548\", \"#6D4C41\", \"#5D4037\", \"#4E342E\"]\n}, {\n  color: \"escala de grises\",\n  preview: \"#E0E0E0\",\n  variants: [\"#FFFFFF\", \"#FAFAFA\", \"#F5F5F5\", \"#EEEEEE\", \"#E0E0E0\", \"#BDBDBD\", \"#9E9E9E\", \"#757575\", \"#616161\", \"#424242\", \"#000000\"]\n}, {\n  color: \"azul gris\",\n  preview: \"#90A4AE\",\n  variants: [\"#ECEFF1\", \"#CFD8DC\", \"#B0BEC5\", \"#90A4AE\", \"#78909C\", \"#607D8B\", \"#546E7A\", \"#455A64\", \"#37474F\"]\n}];\nclass Rgba {\n  constructor(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n  denormalize() {\n    this.r = Math.round(this.r * 255);\n    this.g = Math.round(this.g * 255);\n    this.b = Math.round(this.b * 255);\n    return this;\n  }\n  toString() {\n    this.denormalize();\n    let output = 'rgb' + (this.a != 1 ? 'a(' : '(') + this.r + ', ' + this.g + ', ' + this.b + (this.a != 1 ? ', ' + this.a.toPrecision(2) + ')' : ')');\n    return output;\n  }\n}\nclass Hsva {\n  constructor(h, s, v, a) {\n    this.h = h;\n    this.s = s;\n    this.v = v;\n    this.a = a;\n    this.onChange = new EventEmitter(true);\n  }\n  onColorChange(value) {\n    this.s = value.s / value.rgX;\n    this.v = value.v / value.rgY;\n  }\n  onHueChange(value) {\n    this.h = value.v / value.rgX;\n    // this.sliderH = this.hsva.h;\n  }\n\n  onValueChange(value) {\n    this.v = value.v / value.rgX;\n  }\n  onAlphaChange(value) {\n    this.a = value.v / value.rgX;\n  }\n}\nclass Hsla {\n  constructor(h, s, l, a) {\n    this.h = h;\n    this.s = s;\n    this.l = l;\n    this.a = a;\n  }\n  denormalize() {\n    this.h = Math.round(this.h * 360);\n    this.s = Math.round(this.s * 100);\n    this.l = Math.round(this.l * 100);\n    return this;\n  }\n  toString() {\n    let output = 'hsl' + (this.a != 1 ? 'a(' : '(') + this.h + ', ' + this.s + '%, ' + this.l + '%' + (this.a != 1 ? ', ' + this.a.toPrecision(2) + ')' : ')');\n    return output;\n  }\n}\nclass Cmyk {\n  constructor(c, m, y, k, a = 1) {\n    this.c = c;\n    this.m = m;\n    this.y = y;\n    this.k = k;\n    this.a = a;\n  }\n  denormalize() {\n    this.c = Math.round(this.c * 100);\n    this.m = Math.round(this.m * 100);\n    this.y = Math.round(this.y * 100);\n    this.k = Math.round(this.k * 100);\n    return this;\n  }\n  toString() {\n    this.denormalize();\n    let output = 'cmyk(' + this.c + ', ' + this.m + ', ' + this.y + ', ' + this.k + ')';\n    return output;\n  }\n}\nclass NgxColorsColor {\n  constructor(params) {\n    if (params) {\n      this.preview = params.preview;\n      this.variants = params.variants;\n    }\n  }\n}\nlet ConverterService = /*#__PURE__*/(() => {\n  class ConverterService {\n    // private active: ColorPickerComponent | null = null;\n    constructor() {}\n    // public setActive(active: ColorPickerComponent | null): void {\n    //   this.active = active;\n    // }\n    toFormat(hsva, format) {\n      var output = \"\";\n      if (hsva) {\n        switch (format) {\n          case ColorFormats.HEX:\n            var rgba = this.hsvaToRgba(hsva);\n            rgba.denormalize();\n            var output = this.rgbaToHex(rgba, true);\n            break;\n          case ColorFormats.HSLA:\n            var hsla = this.hsva2hsla(hsva);\n            hsla.denormalize();\n            var output = hsla.toString();\n            break;\n          case ColorFormats.RGBA:\n            var rgba = this.hsvaToRgba(hsva);\n            var output = rgba.toString();\n            break;\n          case ColorFormats.CMYK:\n            var cmyk = this.hsvaToCmyk(hsva);\n            var output = cmyk.toString();\n            break;\n        }\n      }\n      return output;\n    }\n    stringToFormat(color, format) {\n      var hsva = this.stringToHsva(color, true);\n      return this.toFormat(hsva, format);\n    }\n    hsva2hsla(hsva) {\n      const h = hsva.h,\n        s = hsva.s,\n        v = hsva.v,\n        a = hsva.a;\n      if (v === 0) {\n        return new Hsla(h, 0, 0, a);\n      } else if (s === 0 && v === 1) {\n        return new Hsla(h, 1, 1, a);\n      } else {\n        const l = v * (2 - s) / 2;\n        return new Hsla(h, v * s / (1 - Math.abs(2 * l - 1)), l, a);\n      }\n    }\n    hsla2hsva(hsla) {\n      const h = Math.min(hsla.h, 1),\n        s = Math.min(hsla.s, 1);\n      const l = Math.min(hsla.l, 1),\n        a = Math.min(hsla.a, 1);\n      if (l === 0) {\n        return new Hsva(h, 0, 0, a);\n      } else {\n        const v = l + s * (1 - Math.abs(2 * l - 1)) / 2;\n        return new Hsva(h, 2 * (v - l) / v, v, a);\n      }\n    }\n    hsvaToRgba(hsva) {\n      let r, g, b;\n      const h = hsva.h,\n        s = hsva.s,\n        v = hsva.v,\n        a = hsva.a;\n      const i = Math.floor(h * 6);\n      const f = h * 6 - i;\n      const p = v * (1 - s);\n      const q = v * (1 - f * s);\n      const t = v * (1 - (1 - f) * s);\n      switch (i % 6) {\n        case 0:\n          r = v, g = t, b = p;\n          break;\n        case 1:\n          r = q, g = v, b = p;\n          break;\n        case 2:\n          r = p, g = v, b = t;\n          break;\n        case 3:\n          r = p, g = q, b = v;\n          break;\n        case 4:\n          r = t, g = p, b = v;\n          break;\n        case 5:\n          r = v, g = p, b = q;\n          break;\n        default:\n          r = 0, g = 0, b = 0;\n      }\n      return new Rgba(r, g, b, a);\n    }\n    cmykToRgb(cmyk) {\n      const r = (1 - cmyk.c) * (1 - cmyk.k);\n      const g = (1 - cmyk.m) * (1 - cmyk.k);\n      const b = (1 - cmyk.y) * (1 - cmyk.k);\n      return new Rgba(r, g, b, cmyk.a);\n    }\n    rgbaToCmyk(rgba) {\n      const k = 1 - Math.max(rgba.r, rgba.g, rgba.b);\n      if (k === 1) {\n        return new Cmyk(0, 0, 0, 1, rgba.a);\n      } else {\n        const c = (1 - rgba.r - k) / (1 - k);\n        const m = (1 - rgba.g - k) / (1 - k);\n        const y = (1 - rgba.b - k) / (1 - k);\n        return new Cmyk(c, m, y, k, rgba.a);\n      }\n    }\n    hsvaToCmyk(hsva) {\n      let rgba = this.hsvaToRgba(hsva);\n      let cmyk = this.rgbaToCmyk(rgba);\n      return cmyk;\n    }\n    rgbaToHsva(rgba) {\n      let h, s;\n      const r = Math.min(rgba.r, 1),\n        g = Math.min(rgba.g, 1);\n      const b = Math.min(rgba.b, 1),\n        a = Math.min(rgba.a, 1);\n      const max = Math.max(r, g, b),\n        min = Math.min(r, g, b);\n      const v = max,\n        d = max - min;\n      s = max === 0 ? 0 : d / max;\n      if (max === min) {\n        h = 0;\n      } else {\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n          default:\n            h = 0;\n        }\n        h /= 6;\n      }\n      return new Hsva(h, s, v, a);\n    }\n    rgbaToHex(rgba, allowHex8) {\n      /* tslint:disable:no-bitwise */\n      let hex = \"#\" + (1 << 24 | rgba.r << 16 | rgba.g << 8 | rgba.b).toString(16).substr(1);\n      if (rgba.a != 1) {\n        hex += (1 << 8 | Math.round(rgba.a * 255)).toString(16).substr(1);\n      }\n      /* tslint:enable:no-bitwise */\n      return hex;\n    }\n    normalizeCMYK(cmyk) {\n      return new Cmyk(cmyk.c / 100, cmyk.m / 100, cmyk.y / 100, cmyk.k / 100, cmyk.a);\n    }\n    denormalizeCMYK(cmyk) {\n      return new Cmyk(Math.floor(cmyk.c * 100), Math.floor(cmyk.m * 100), Math.floor(cmyk.y * 100), Math.floor(cmyk.k * 100), cmyk.a);\n    }\n    denormalizeRGBA(rgba) {\n      return new Rgba(Math.round(rgba.r * 255), Math.round(rgba.g * 255), Math.round(rgba.b * 255), rgba.a);\n    }\n    stringToHsva(colorString = \"\", allowHex8 = true) {\n      let hsva = null;\n      colorString = (colorString || \"\").toLowerCase();\n      const stringParsers = [{\n        re: /(rgb)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n        parse: function (execResult) {\n          return new Rgba(parseInt(execResult[2], 10) / 255, parseInt(execResult[3], 10) / 255, parseInt(execResult[4], 10) / 255, isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n        }\n      }, {\n        re: /(hsl)a?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n        parse: function (execResult) {\n          return new Hsla(parseInt(execResult[2], 10) / 360, parseInt(execResult[3], 10) / 100, parseInt(execResult[4], 10) / 100, isNaN(parseFloat(execResult[5])) ? 1 : parseFloat(execResult[5]));\n        }\n      }, {\n        re: /cmyk?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*%?,\\s*(\\d{1,3})\\s*%?(?:,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)/,\n        parse: function (execResult) {\n          return new Cmyk(parseInt(execResult[1], 10) / 100, parseInt(execResult[2], 10) / 100, parseInt(execResult[3], 10) / 100, parseInt(execResult[4], 10) / 100);\n        }\n      }];\n      if (allowHex8) {\n        stringParsers.push({\n          re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})?$/,\n          parse: function (execResult) {\n            return new Rgba(parseInt(execResult[1], 16) / 255, parseInt(execResult[2], 16) / 255, parseInt(execResult[3], 16) / 255, parseInt(execResult[4] || \"FF\", 16) / 255);\n          }\n        });\n      } else {\n        stringParsers.push({\n          re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})$/,\n          parse: function (execResult) {\n            return new Rgba(parseInt(execResult[1], 16) / 255, parseInt(execResult[2], 16) / 255, parseInt(execResult[3], 16) / 255, 1);\n          }\n        });\n      }\n      stringParsers.push({\n        re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])$/,\n        parse: function (execResult) {\n          return new Rgba(parseInt(execResult[1] + execResult[1], 16) / 255, parseInt(execResult[2] + execResult[2], 16) / 255, parseInt(execResult[3] + execResult[3], 16) / 255, 1);\n        }\n      });\n      for (const key in stringParsers) {\n        if (stringParsers.hasOwnProperty(key)) {\n          const parser = stringParsers[key];\n          const match = parser.re.exec(colorString),\n            color = match && parser.parse(match);\n          if (color) {\n            if (color instanceof Rgba) {\n              hsva = this.rgbaToHsva(color);\n            } else if (color instanceof Hsla) {\n              hsva = this.hsla2hsva(color);\n            } else if (color instanceof Cmyk) {\n              let rgb = this.cmykToRgb(color);\n              hsva = this.rgbaToHsva(rgb);\n            }\n            return hsva;\n          }\n        }\n      }\n      return hsva;\n    }\n    outputFormat(hsva) {\n      return this.hsvaToRgba(hsva).toString();\n    }\n    getFormatByString(color) {\n      if (color) {\n        color = color.toLowerCase();\n        let regexHex = /(#([\\da-f]{3}(?:[\\da-f]{3})?(?:[\\da-f]{2})?))/;\n        let regexRGBA = /(rgba\\((\\d{1,3},\\s?){3}(1|0?\\.\\d+)\\)|rgb\\(\\d{1,3}(,\\s?\\d{1,3}){2}\\))/;\n        let regexHSLA = /(hsla\\((\\d{1,3}%?,\\s?){3}(1|0?\\.\\d+)\\)|hsl\\(\\d{1,3}%?(,\\s?\\d{1,3}%?){2}\\))/;\n        let regexCMYK = /(cmyk\\(\\d{1,3}(,\\s?\\d{1,3}){3}\\))/;\n        if (regexHex.test(color)) {\n          return \"hex\";\n        } else if (regexRGBA.test(color)) {\n          return \"rgba\";\n        } else if (regexHSLA.test(color)) {\n          return \"hsla\";\n        } else if (regexCMYK.test(color)) {\n          return \"cmyk\";\n        }\n      }\n      return \"hex\";\n    }\n  }\n  ConverterService.ɵfac = function ConverterService_Factory(t) {\n    return new (t || ConverterService)();\n  };\n  ConverterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ConverterService,\n    factory: ConverterService.ɵfac\n  });\n  return ConverterService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ConverterService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nclass SliderPosition {\n  constructor(h, s, v, a) {\n    this.h = h;\n    this.s = s;\n    this.v = v;\n    this.a = a;\n  }\n}\nclass SliderDimension {\n  constructor(h, s, v, a) {\n    this.h = h;\n    this.s = s;\n    this.v = v;\n    this.a = a;\n  }\n}\nlet SliderDirective = /*#__PURE__*/(() => {\n  class SliderDirective {\n    mouseDown(event) {\n      this.start(event);\n    }\n    touchStart(event) {\n      this.start(event);\n    }\n    constructor(elRef) {\n      this.elRef = elRef;\n      this.dragEnd = new EventEmitter();\n      this.dragStart = new EventEmitter();\n      this.newValue = new EventEmitter();\n      this.listenerMove = event => this.move(event);\n      this.listenerStop = () => this.stop();\n    }\n    move(event) {\n      event.preventDefault();\n      this.setCursor(event);\n    }\n    start(event) {\n      this.setCursor(event);\n      event.stopPropagation();\n      document.addEventListener('mouseup', this.listenerStop);\n      document.addEventListener('touchend', this.listenerStop);\n      document.addEventListener('mousemove', this.listenerMove);\n      document.addEventListener('touchmove', this.listenerMove);\n      this.dragStart.emit();\n    }\n    stop() {\n      document.removeEventListener('mouseup', this.listenerStop);\n      document.removeEventListener('touchend', this.listenerStop);\n      document.removeEventListener('mousemove', this.listenerMove);\n      document.removeEventListener('touchmove', this.listenerMove);\n      this.dragEnd.emit();\n    }\n    getX(event) {\n      const position = this.elRef.nativeElement.getBoundingClientRect();\n      const pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\n      return pageX - position.left - window.pageXOffset;\n    }\n    getY(event) {\n      const position = this.elRef.nativeElement.getBoundingClientRect();\n      const pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\n      return pageY - position.top - window.pageYOffset;\n    }\n    setCursor(event) {\n      const width = this.elRef.nativeElement.offsetWidth;\n      const height = this.elRef.nativeElement.offsetHeight;\n      const x = Math.max(0, Math.min(this.getX(event), width));\n      const y = Math.max(0, Math.min(this.getY(event), height));\n      if (this.rgX !== undefined && this.rgY !== undefined) {\n        this.newValue.emit({\n          s: x / width,\n          v: 1 - y / height,\n          rgX: this.rgX,\n          rgY: this.rgY\n        });\n      } else if (this.rgX === undefined && this.rgY !== undefined) {\n        this.newValue.emit({\n          v: y / height,\n          rgY: this.rgY\n        });\n      } else if (this.rgX !== undefined && this.rgY === undefined) {\n        this.newValue.emit({\n          v: x / width,\n          rgX: this.rgX\n        });\n      }\n    }\n  }\n  SliderDirective.ɵfac = function SliderDirective_Factory(t) {\n    return new (t || SliderDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  SliderDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SliderDirective,\n    selectors: [[\"\", \"slider\", \"\"]],\n    hostBindings: function SliderDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousedown\", function SliderDirective_mousedown_HostBindingHandler($event) {\n          return ctx.mouseDown($event);\n        })(\"touchstart\", function SliderDirective_touchstart_HostBindingHandler($event) {\n          return ctx.touchStart($event);\n        });\n      }\n    },\n    inputs: {\n      rgX: \"rgX\",\n      rgY: \"rgY\",\n      slider: \"slider\"\n    },\n    outputs: {\n      dragEnd: \"dragEnd\",\n      dragStart: \"dragStart\",\n      newValue: \"newValue\"\n    }\n  });\n  return SliderDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SliderDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[slider]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    rgX: [{\n      type: Input\n    }],\n    rgY: [{\n      type: Input\n    }],\n    slider: [{\n      type: Input\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    newValue: [{\n      type: Output\n    }],\n    mouseDown: [{\n      type: HostListener,\n      args: ['mousedown', ['$event']]\n    }],\n    touchStart: [{\n      type: HostListener,\n      args: ['touchstart', ['$event']]\n    }]\n  });\n})();\nlet ColorPickerComponent = /*#__PURE__*/(() => {\n  class ColorPickerComponent {\n    constructor(service, cdr) {\n      this.service = service;\n      this.cdr = cdr;\n      //IO color\n      this.color = new Hsva(0, 1, 1, 1);\n      this.controls = \"default\";\n      this.sliderChange = new EventEmitter(false);\n      this.onAlphaChange = new EventEmitter(false);\n      //Event triggered when any slider change\n      // @Output() colorSelectedChange:EventEmitter<Hsva> = new EventEmitter<Hsva>(false);\n      this.hsva = new Hsva(0, 1, 1, 1);\n      this.selectedColor = \"#000000\";\n      this.fallbackColor = \"#000000\";\n    }\n    ngOnInit() {\n      if (!this.color) {\n        this.color = new Hsva(0, 1, 1, 1);\n      }\n      this.slider = new SliderPosition(0, 0, 0, 0);\n      this.update();\n    }\n    ngOnDestroy() {}\n    ngOnChanges(changes) {\n      if (changes.color && this.color) {\n        this.update();\n      }\n    }\n    ngAfterViewInit() {\n      const hueWidth = this.hueSlider?.nativeElement.offsetWidth || 140;\n      const alphaWidth = this.alphaSlider?.nativeElement.offsetWidth || 140;\n      this.sliderDimMax = new SliderDimension(hueWidth, 220, 130, alphaWidth);\n      this.update();\n    }\n    onSliderChange(type, event) {\n      switch (type) {\n        case \"saturation-lightness\":\n          this.hsva.onColorChange(event);\n          break;\n        case \"hue\":\n          this.hsva.onHueChange(event);\n          break;\n        case \"alpha\":\n          this.hsva.onAlphaChange(event);\n          this.onAlphaChange.emit(event);\n          break;\n        case \"value\":\n          this.hsva.onValueChange(event);\n          break;\n      }\n      // this.sHue = this.hsva.h;\n      this.update();\n      this.setColor(this.outputColor);\n    }\n    setColor(color) {\n      this.color = color;\n      this.sliderChange.emit(this.color);\n    }\n    getBackgroundColor(color) {\n      return {\n        background: \"linear-gradient(90deg, rgba(36,0,0,0) 0%, \" + color + \" 100%)\"\n      };\n    }\n    update() {\n      this.hsva = this.color;\n      if (this.sliderDimMax) {\n        let rgba = this.service.hsvaToRgba(this.hsva).denormalize();\n        let hue = this.service.hsvaToRgba(new Hsva(this.hsva.h, 1, 1, 1)).denormalize();\n        this.hueSliderColor = \"rgb(\" + hue.r + \",\" + hue.g + \",\" + hue.b + \")\";\n        this.alphaSliderColor = \"rgb(\" + rgba.r + \",\" + rgba.g + \",\" + rgba.b + \")\";\n        this.outputColor = this.hsva;\n        this.selectedColor = this.service.hsvaToRgba(this.hsva).toString();\n        this.slider = new SliderPosition(\n        // (this.sHue || this.hsva.h) * this.sliderDimMax.h - 8,\n        this.hsva.h * this.sliderDimMax.h - 5, this.hsva.s * this.sliderDimMax.s - 8, (1 - this.hsva.v) * this.sliderDimMax.v - 8, this.hsva.a * this.sliderDimMax.a - 5);\n        this.cdr.detectChanges();\n      }\n    }\n  }\n  ColorPickerComponent.ɵfac = function ColorPickerComponent_Factory(t) {\n    return new (t || ColorPickerComponent)(i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  ColorPickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColorPickerComponent,\n    selectors: [[\"color-picker\"]],\n    viewQuery: function ColorPickerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hueSlider = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.alphaSlider = _t.first);\n      }\n    },\n    inputs: {\n      color: \"color\",\n      controls: \"controls\"\n    },\n    outputs: {\n      sliderChange: \"sliderChange\",\n      onAlphaChange: \"onAlphaChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 8,\n    vars: 4,\n    consts: [[\"dialogPopup\", \"\"], [\"hueSlider\", \"\"], [\"alphaSlider\", \"\"], [1, \"color-picker\", 3, \"click\"], [\"class\", \"saturation-lightness\", 3, \"slider\", \"rgX\", \"rgY\", \"background-color\", \"newValue\", 4, \"ngIf\"], [1, \"hue-alpha\", \"box\"], [\"class\", \"left\", 4, \"ngIf\"], [1, \"right\"], [\"class\", \"hue\", 3, \"slider\", \"rgX\", \"newValue\", 4, \"ngIf\"], [\"class\", \"alpha\", 3, \"slider\", \"rgX\", \"newValue\", 4, \"ngIf\"], [1, \"saturation-lightness\", 3, \"newValue\", \"slider\", \"rgX\", \"rgY\"], [1, \"cursor\"], [1, \"left\"], [1, \"selected-color-background\"], [1, \"selected-color\"], [1, \"hue\", 3, \"newValue\", \"slider\", \"rgX\"], [1, \"sliderCursor\"], [1, \"alpha\", 3, \"newValue\", \"slider\", \"rgX\"], [1, \"alpha-gradient\", 3, \"ngStyle\"]],\n    template: function ColorPickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 3, 0);\n        i0.ɵɵlistener(\"click\", function ColorPickerComponent_Template_div_click_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView($event.stopPropagation());\n        });\n        i0.ɵɵtemplate(2, ColorPickerComponent_div_2_Template, 3, 8, \"div\", 4);\n        i0.ɵɵelementStart(3, \"div\", 5);\n        i0.ɵɵtemplate(4, ColorPickerComponent_div_4_Template, 3, 2, \"div\", 6);\n        i0.ɵɵelementStart(5, \"div\", 7);\n        i0.ɵɵtemplate(6, ColorPickerComponent_div_6_Template, 5, 3, \"div\", 8)(7, ColorPickerComponent_div_7_Template, 6, 4, \"div\", 9);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls != \"only-alpha\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls != \"only-alpha\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls != \"only-alpha\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.controls != \"no-alpha\");\n      }\n    },\n    dependencies: [i2.NgIf, i2.NgStyle, SliderDirective],\n    styles: [\".color-picker{position:relative;z-index:1000;width:220px;height:auto;cursor:default;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none;touch-action:none}.color-picker *{box-sizing:border-box;margin:0;font-size:11px}.color-picker input{width:0;height:26px;min-width:0;font-size:13px;text-align:center;color:#000}.color-picker input:invalid,.color-picker input:-moz-ui-invalid,.color-picker input:-moz-submit-invalid{box-shadow:none}.color-picker input::-webkit-inner-spin-button,.color-picker input::-webkit-outer-spin-button{margin:0;-webkit-appearance:none}.color-picker .sliderCursor{width:10px;border-radius:5px;position:absolute;margin-top:-3px;border:1px solid black}.color-picker .sliderCursor>div{border:2px solid white;border-radius:5px}.color-picker .sliderCursor>div>div{border-radius:5px;border:1px solid black;height:24px}.color-picker .cursor{position:absolute;width:21px;border:3px solid black;border-radius:100%;margin:-2px 0 0 -2px}.color-picker .cursor>div{height:15px;border:3px solid white;border-radius:100%}.color-picker .box{display:flex;padding:4px 8px}.color-picker .left{position:relative;padding:16px 8px}.color-picker .right{flex:1 1 auto;display:flex;flex-direction:column;gap:10px;padding:12px 8px}.color-picker .hue-alpha{display:flex;align-items:center;margin-bottom:3px}.color-picker .hue{direction:ltr;width:100%;height:24px;border:none;border-radius:5px;position:relative;cursor:pointer;background-size:100% 100%;background:linear-gradient(to right,red 0%,#ff0 17%,lime 33%,cyan 50%,blue 66%,#f0f 83%,red 100%)}.color-picker .alpha{direction:ltr;position:relative;width:100%;height:24px;border:none;border-radius:5px;cursor:pointer;background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.color-picker .alpha-gradient{width:100%;height:100%;border-radius:5px;position:absolute}.color-picker .selected-color{position:absolute;top:16px;left:8px;width:40px;height:40px;box-shadow:0 1px 1px 1px #00000026;border-radius:50%}.color-picker .selected-color-background{width:40px;height:40px;border-radius:50%;background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.color-picker .saturation-lightness{direction:ltr;cursor:crosshair;width:100%;position:relative;height:130px;border:none;touch-action:manipulation;background-image:linear-gradient(to top,#000 0%,transparent 100%),linear-gradient(to right,#fff 0%,transparent 100%)}\\n\"],\n    encapsulation: 2\n  });\n  return ColorPickerComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColorPickerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"color-picker\",\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div #dialogPopup class=\\\"color-picker\\\" (click)=\\\"$event.stopPropagation()\\\">\\n  <div\\n    class=\\\"saturation-lightness\\\"\\n    *ngIf=\\\"this.controls != 'only-alpha'\\\"\\n    [slider]\\n    [rgX]=\\\"1\\\"\\n    [rgY]=\\\"1\\\"\\n    [style.background-color]=\\\"hueSliderColor\\\"\\n    (newValue)=\\\"onSliderChange('saturation-lightness', $event)\\\"\\n  >\\n    <div class=\\\"cursor\\\" [style.top.px]=\\\"slider?.v\\\" [style.left.px]=\\\"slider?.s\\\">\\n      <div></div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"hue-alpha box\\\">\\n    <div class=\\\"left\\\" *ngIf=\\\"this.controls != 'only-alpha'\\\">\\n      <div class=\\\"selected-color-background\\\"></div>\\n      <div\\n        class=\\\"selected-color\\\"\\n        [style.background-color]=\\\"selectedColor\\\"\\n      ></div>\\n    </div>\\n\\n    <div class=\\\"right\\\">\\n      <div\\n        *ngIf=\\\"this.controls != 'only-alpha'\\\"\\n        #hueSlider\\n        class=\\\"hue\\\"\\n        [slider]\\n        [rgX]=\\\"1\\\"\\n        (newValue)=\\\"onSliderChange('hue', $event)\\\"\\n      >\\n        <div class=\\\"sliderCursor\\\" [style.left.px]=\\\"slider?.h\\\">\\n          <div><div></div></div>\\n        </div>\\n      </div>\\n\\n      <div\\n        *ngIf=\\\"this.controls != 'no-alpha'\\\"\\n        #alphaSlider\\n        class=\\\"alpha\\\"\\n        [slider]\\n        [rgX]=\\\"1\\\"\\n        (newValue)=\\\"onSliderChange('alpha', $event)\\\"\\n      >\\n        <div\\n          class=\\\"alpha-gradient\\\"\\n          [ngStyle]=\\\"getBackgroundColor(alphaSliderColor)\\\"\\n        ></div>\\n        <div class=\\\"sliderCursor\\\" [style.left.px]=\\\"slider?.a\\\">\\n          <div><div></div></div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".color-picker{position:relative;z-index:1000;width:220px;height:auto;cursor:default;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none;touch-action:none}.color-picker *{box-sizing:border-box;margin:0;font-size:11px}.color-picker input{width:0;height:26px;min-width:0;font-size:13px;text-align:center;color:#000}.color-picker input:invalid,.color-picker input:-moz-ui-invalid,.color-picker input:-moz-submit-invalid{box-shadow:none}.color-picker input::-webkit-inner-spin-button,.color-picker input::-webkit-outer-spin-button{margin:0;-webkit-appearance:none}.color-picker .sliderCursor{width:10px;border-radius:5px;position:absolute;margin-top:-3px;border:1px solid black}.color-picker .sliderCursor>div{border:2px solid white;border-radius:5px}.color-picker .sliderCursor>div>div{border-radius:5px;border:1px solid black;height:24px}.color-picker .cursor{position:absolute;width:21px;border:3px solid black;border-radius:100%;margin:-2px 0 0 -2px}.color-picker .cursor>div{height:15px;border:3px solid white;border-radius:100%}.color-picker .box{display:flex;padding:4px 8px}.color-picker .left{position:relative;padding:16px 8px}.color-picker .right{flex:1 1 auto;display:flex;flex-direction:column;gap:10px;padding:12px 8px}.color-picker .hue-alpha{display:flex;align-items:center;margin-bottom:3px}.color-picker .hue{direction:ltr;width:100%;height:24px;border:none;border-radius:5px;position:relative;cursor:pointer;background-size:100% 100%;background:linear-gradient(to right,red 0%,#ff0 17%,lime 33%,cyan 50%,blue 66%,#f0f 83%,red 100%)}.color-picker .alpha{direction:ltr;position:relative;width:100%;height:24px;border:none;border-radius:5px;cursor:pointer;background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.color-picker .alpha-gradient{width:100%;height:100%;border-radius:5px;position:absolute}.color-picker .selected-color{position:absolute;top:16px;left:8px;width:40px;height:40px;box-shadow:0 1px 1px 1px #00000026;border-radius:50%}.color-picker .selected-color-background{width:40px;height:40px;border-radius:50%;background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.color-picker .saturation-lightness{direction:ltr;cursor:crosshair;width:100%;position:relative;height:130px;border:none;touch-action:manipulation;background-image:linear-gradient(to top,#000 0%,transparent 100%),linear-gradient(to right,#fff 0%,transparent 100%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ConverterService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    controls: [{\n      type: Input\n    }],\n    sliderChange: [{\n      type: Output\n    }],\n    onAlphaChange: [{\n      type: Output\n    }],\n    hueSlider: [{\n      type: ViewChild,\n      args: [\"hueSlider\", {\n        static: false\n      }]\n    }],\n    alphaSlider: [{\n      type: ViewChild,\n      args: [\"alphaSlider\", {\n        static: false\n      }]\n    }]\n  });\n})();\nlet PanelComponent = /*#__PURE__*/(() => {\n  class PanelComponent {\n    click(event) {\n      if (this.isOutside(event)) {\n        this.emitClose('cancel');\n      }\n    }\n    onScroll() {\n      this.onScreenMovement();\n    }\n    onResize() {\n      this.onScreenMovement();\n    }\n    constructor(service, cdr) {\n      this.service = service;\n      this.cdr = cdr;\n      this.color = '#000000';\n      this.previewColor = '#000000';\n      this.hsva = new Hsva(0, 1, 1, 1);\n      this.colorsAnimationEffect = 'slide-in';\n      this.palette = defaultColors;\n      this.variants = [];\n      this.userFormats = [];\n      this.colorFormats = formats;\n      this.format = ColorFormats.HEX;\n      this.formatMap = {\n        'hex': ColorFormats.HEX,\n        'rgba': ColorFormats.RGBA,\n        'hsla': ColorFormats.HSLA,\n        'cmyk': ColorFormats.CMYK\n      };\n      this.canChangeFormat = true;\n      this.menu = 1;\n      this.hideColorPicker = false;\n      this.hideTextInput = false;\n      this.colorPickerControls = 'default';\n      this.placeholder = '#FFFFFF';\n    }\n    ngOnInit() {\n      this.setPosition();\n      this.hsva = this.service.stringToHsva(this.color);\n      this.indexSeleccionado = this.findIndexSelectedColor(this.palette);\n    }\n    ngAfterViewInit() {\n      this.setPositionY();\n    }\n    onScreenMovement() {\n      this.setPosition();\n      this.setPositionY();\n      if (!this.panelRef.nativeElement.style.transition) {\n        this.panelRef.nativeElement.style.transition = 'transform 0.5s ease-out';\n      }\n    }\n    findIndexSelectedColor(colors) {\n      let resultIndex = undefined;\n      if (this.color) {\n        for (let i = 0; i < colors.length; i++) {\n          const color = colors[i];\n          if (typeof color == 'string') {\n            if (this.service.stringToFormat(this.color, ColorFormats.HEX) == this.service.stringToFormat(color, ColorFormats.HEX)) {\n              resultIndex = i;\n            }\n          } else if (color === undefined) {\n            this.color = undefined;\n          } else {\n            if (this.findIndexSelectedColor(color.variants) != undefined) {\n              resultIndex = i;\n            }\n          }\n        }\n      }\n      return resultIndex;\n    }\n    iniciate(triggerInstance, triggerElementRef, color, palette, animation, format, hideTextInput, hideColorPicker, acceptLabel, cancelLabel, colorPickerControls, position, userFormats = []) {\n      this.colorPickerControls = colorPickerControls;\n      this.triggerInstance = triggerInstance;\n      this.TriggerBBox = triggerElementRef;\n      this.color = color;\n      this.hideColorPicker = hideColorPicker;\n      this.hideTextInput = hideTextInput;\n      this.acceptLabel = acceptLabel;\n      this.cancelLabel = cancelLabel;\n      if (userFormats.length) {\n        const allFormatsValid = userFormats.every(frt => formats.includes(frt));\n        if (allFormatsValid) {\n          this.colorFormats = userFormats;\n        }\n      }\n      if (format) {\n        if (this.colorFormats.includes(format)) {\n          this.format = this.colorFormats.indexOf(format.toLowerCase());\n          this.canChangeFormat = false;\n          if (this.service.getFormatByString(this.color) != format.toLowerCase()) {\n            this.setColor(this.service.stringToHsva(this.color));\n          }\n        } else {\n          console.error('Format provided is invalid, using HEX');\n          this.format = ColorFormats.HEX;\n        }\n      } else {\n        this.format = this.colorFormats.indexOf(this.service.getFormatByString(this.color));\n        if (this.format < 0) {\n          this.format = 0;\n        }\n      }\n      this.previewColor = this.color;\n      this.palette = palette ?? defaultColors;\n      this.colorsAnimationEffect = animation;\n      if (position == 'top') {\n        let TriggerBBox = this.TriggerBBox.nativeElement.getBoundingClientRect();\n        this.positionString = 'transform: translateY(calc( -100% - ' + TriggerBBox.height + 'px ))';\n      }\n    }\n    setPosition() {\n      if (this.TriggerBBox) {\n        const panelWidth = 250;\n        const viewportOffset = this.TriggerBBox.nativeElement.getBoundingClientRect();\n        this.top = viewportOffset.top + viewportOffset.height;\n        if (viewportOffset.left + panelWidth > window.innerWidth) {\n          this.left = viewportOffset.right < panelWidth ? window.innerWidth / 2 - panelWidth / 2 : viewportOffset.right - panelWidth;\n        } else {\n          this.left = viewportOffset.left;\n        }\n      }\n    }\n    setPositionY() {\n      const triggerBBox = this.TriggerBBox.nativeElement.getBoundingClientRect();\n      const panelBBox = this.panelRef.nativeElement.getBoundingClientRect();\n      const panelHeight = panelBBox.height;\n      // Check for space below the trigger\n      if (triggerBBox.bottom + panelHeight > window.innerHeight) {\n        // there is no space, move panel over the trigger\n        this.positionString = triggerBBox.top < panelBBox.height ? 'transform: translateY(-' + triggerBBox.bottom + 'px );' : 'transform: translateY(calc( -100% - ' + triggerBBox.height + 'px ));';\n      } else {\n        this.positionString = '';\n      }\n      this.cdr.detectChanges();\n    }\n    hasVariant(color) {\n      if (!this.previewColor) {\n        return false;\n      }\n      return typeof color != 'string' && color.variants.some(v => v.toUpperCase() == this.previewColor.toUpperCase());\n    }\n    isSelected(color) {\n      if (!this.previewColor) {\n        return false;\n      }\n      return typeof color == 'string' && color.toUpperCase() == this.previewColor.toUpperCase();\n    }\n    getBackgroundColor(color) {\n      if (typeof color == 'string') {\n        return {\n          background: color\n        };\n      } else {\n        return {\n          background: color?.preview\n        };\n      }\n    }\n    onAlphaChange(event) {\n      this.palette = this.ChangeAlphaOnPalette(event, this.palette);\n    }\n    ChangeAlphaOnPalette(alpha, colors) {\n      var result = [];\n      for (let i = 0; i < colors.length; i++) {\n        const color = colors[i];\n        if (typeof color == 'string') {\n          let newColor = this.service.stringToHsva(color);\n          newColor.onAlphaChange(alpha);\n          result.push(this.service.toFormat(newColor, this.format));\n        } else {\n          let newColor = new NgxColorsColor();\n          let newColorPreview = this.service.stringToHsva(color.preview);\n          newColorPreview.onAlphaChange(alpha);\n          newColor.preview = this.service.toFormat(newColorPreview, this.format);\n          newColor.variants = this.ChangeAlphaOnPalette(alpha, color.variants);\n          result.push(newColor);\n        }\n      }\n      return result;\n    }\n    /**\n     * Change color from default colors\n     * @param string color\n     */\n    changeColor(color) {\n      this.setColor(this.service.stringToHsva(color));\n      // this.triggerInstance.onChange();\n      this.emitClose('accept');\n    }\n    onChangeColorPicker(event) {\n      this.temporalColor = event;\n      this.color = this.service.toFormat(event, this.format);\n      // this.setColor(event);\n      this.triggerInstance.sliderChange(this.service.toFormat(event, this.format));\n    }\n    changeColorManual(color) {\n      this.previewColor = color;\n      this.color = color;\n      this.hsva = this.service.stringToHsva(color);\n      this.setPreviewColor(this.hsva);\n      this.temporalColor = this.hsva;\n      this.triggerInstance.setColor(this.color, this.previewColor);\n      // this.triggerInstance.onChange();\n    }\n\n    setColor(value, colorIndex = -1) {\n      this.hsva = value;\n      let formatName = this.colorFormats[this.format];\n      let index = colorIndex;\n      if (index < 0) {\n        index = this.formatMap[formatName];\n      }\n      this.color = this.service.toFormat(value, index);\n      this.setPreviewColor(value);\n      this.triggerInstance.setColor(this.color, this.previewColor);\n    }\n    setPreviewColor(value) {\n      this.previewColor = value ? this.service.hsvaToRgba(value).toString() : undefined;\n    }\n    onChange() {\n      // this.triggerInstance.onChange();\n    }\n    onColorClick(color) {\n      if (typeof color == 'string' || color === undefined) {\n        this.changeColor(color);\n      } else {\n        this.variants = color.variants;\n        this.menu = 2;\n      }\n    }\n    addColor() {\n      this.menu = 3;\n      this.backupColor = this.color;\n      // this.color = \"#FF0000\";\n      this.temporalColor = this.service.stringToHsva(this.color);\n    }\n    nextFormat() {\n      if (this.canChangeFormat) {\n        this.format = (this.format + 1) % this.colorFormats.length;\n        let formatName = this.colorFormats[this.format];\n        let index = this.formatMap[formatName];\n        this.setColor(this.hsva, index);\n        this.placeholder = this.service.toFormat(new Hsva(0, 0, 1, 1), index);\n      }\n    }\n    emitClose(status) {\n      if (this.menu == 3) {\n        if (status == 'cancel') {} else if (status == 'accept') {\n          this.setColor(this.temporalColor);\n        }\n      }\n      this.triggerInstance.closePanel();\n    }\n    onClickBack() {\n      if (this.menu == 3) {\n        this.color = this.backupColor;\n        this.hsva = this.service.stringToHsva(this.color);\n      }\n      this.indexSeleccionado = this.findIndexSelectedColor(this.palette);\n      this.menu = 1;\n    }\n    isOutside(event) {\n      return event.target.classList.contains('ngx-colors-overlay');\n    }\n  }\n  PanelComponent.ɵfac = function PanelComponent_Factory(t) {\n    return new (t || PanelComponent)(i0.ɵɵdirectiveInject(ConverterService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  PanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PanelComponent,\n    selectors: [[\"ngx-colors-panel\"]],\n    viewQuery: function PanelComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panelRef = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function PanelComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousedown\", function PanelComponent_mousedown_HostBindingHandler($event) {\n          return ctx.click($event);\n        }, false, i0.ɵɵresolveDocument)(\"scroll\", function PanelComponent_scroll_HostBindingHandler() {\n          return ctx.onScroll();\n        }, false, i0.ɵɵresolveDocument)(\"resize\", function PanelComponent_resize_HostBindingHandler() {\n          return ctx.onResize();\n        }, false, i0.ɵɵresolveWindow);\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"top\", ctx.top, \"px\")(\"left\", ctx.left, \"px\");\n      }\n    },\n    decls: 6,\n    vars: 6,\n    consts: [[\"dialog\", \"\"], [\"paintInput\", \"\"], [1, \"opened\"], [4, \"ngIf\"], [\"class\", \"manual-input-wrapper\", 4, \"ngIf\"], [1, \"colors\"], [4, \"ngFor\", \"ngForOf\"], [\"style\", \"background: rgb(245 245 245); position: relative\", \"class\", \"circle button\", 3, \"click\", 4, \"ngIf\"], [3, \"controls\", \"color\", \"colorChange\", \"onAlphaChange\", 4, \"ngIf\"], [1, \"circle\", \"wrapper\", \"color\"], [1, \"circle\", \"color\", \"circle-border\", 3, \"click\", \"ngStyle\"], [\"class\", \"selected\", 4, \"ngIf\"], [1, \"selected\"], [1, \"circle\", \"button\", 2, \"background\", \"rgb(245 245 245)\", \"position\", \"relative\", 3, \"click\"], [\"style\", \"\\n            position: absolute;\\n            height: 7px;\\n            width: 7px;\\n            border: 1px solid rgba(0, 0, 0, 0.03);\\n            border-radius: 100%;\\n            top: 0;\\n            right: 0;\\n          \", 3, \"ngStyle\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"height\", \"24px\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"fill\", \"#222222\"], [\"d\", \"M24 24H0V0h24v24z\", \"fill\", \"none\", \"opacity\", \".87\"], [\"d\", \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\"], [2, \"position\", \"absolute\", \"height\", \"7px\", \"width\", \"7px\", \"border\", \"1px solid rgba(0, 0, 0, 0.03)\", \"border-radius\", \"100%\", \"top\", \"0\", \"right\", \"0\", 3, \"ngStyle\"], [3, \"colorChange\", \"onAlphaChange\", \"controls\", \"color\"], [1, \"circle\", \"wrapper\"], [1, \"add\", 3, \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"width\", \"24\", \"height\", \"24\", \"viewBox\", \"0 0 24 24\"], [\"d\", \"M0 0h24v24H0z\", \"fill\", \"none\"], [\"d\", \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"], [1, \"circle\", \"circle-border\", 3, \"click\", \"ngStyle\"], [1, \"nav-wrapper\"], [1, \"round-button\", \"button\", 2, \"float\", \"left\", 3, \"click\"], [2, \"float\", \"right\", 3, \"click\"], [1, \"color-picker-wrapper\"], [3, \"sliderChange\", \"controls\", \"color\"], [1, \"manual-input-wrapper\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [1, \"g-input\"], [\"type\", \"text\", 3, \"keyup\", \"keydown.enter\", \"placeholder\", \"value\"]],\n    template: function PanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 2, 0);\n        i0.ɵɵtemplate(2, PanelComponent_ng_container_2_Template, 5, 4, \"ng-container\", 3)(3, PanelComponent_ng_container_3_Template, 8, 2, \"ng-container\", 3)(4, PanelComponent_ng_container_4_Template, 12, 4, \"ng-container\", 3)(5, PanelComponent_div_5_Template, 6, 7, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.positionString);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.menu == 1);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.menu == 2);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.menu == 3);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideTextInput);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle, ColorPickerComponent],\n    styles: [\"[_nghost-%COMP%]{position:fixed;z-index:2001}.hidden[_ngcontent-%COMP%]{display:none}.button[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center}.top[_ngcontent-%COMP%]{transform:translateY(-100%)}.opened[_ngcontent-%COMP%]{box-sizing:border-box;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background:#fff;width:250px;border-radius:5px;position:absolute}.opened[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border:none;font-family:inherit;font-size:12px;background-color:unset;-webkit-user-select:none;user-select:none;padding:10px;letter-spacing:1px;color:#222;border-radius:3px;line-height:20px}.opened[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover, .opened[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]:hover{background-color:#0000000d;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1);transition-property:opacity,background-color;transition-duration:.2s,.2s;transition-timing-function:cubic-bezier(.35,0,.25,1),cubic-bezier(.35,0,.25,1);transition-delay:0s,0s}.opened[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;align-items:center;margin:15px}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]{height:34px;width:34px;box-sizing:border-box;border-radius:100%;cursor:pointer}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .add[_ngcontent-%COMP%]{font-size:20px;line-height:45px;text-align:center}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]   .selected[_ngcontent-%COMP%]{border:2px solid white;border-radius:100%;height:28px;width:28px;box-sizing:border-box;margin:2px}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle.colornull[_ngcontent-%COMP%]{background:linear-gradient(135deg,rgba(236,236,236,.7) 0%,rgba(236,236,236,.7) 45%,#de0f00 50%,rgba(236,236,236,.7) 55%,rgba(236,236,236,.7) 100%)}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle.wrapper[_ngcontent-%COMP%]{margin:0 5px 5px;flex:34px 0 0}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle.button[_ngcontent-%COMP%]{margin:0 5px 5px}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle.wrapper.color[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.opened[_ngcontent-%COMP%]   .colors[_ngcontent-%COMP%]   .circle-border[_ngcontent-%COMP%]{border:1px solid rgba(0,0,0,.03)}.opened[_ngcontent-%COMP%]   .color-picker-wrapper[_ngcontent-%COMP%]{margin:5px 15px}.opened[_ngcontent-%COMP%]   .nav-wrapper[_ngcontent-%COMP%]{overflow:hidden;margin:5px}.opened[_ngcontent-%COMP%]   .nav-wrapper[_ngcontent-%COMP%]   .round-button[_ngcontent-%COMP%]{padding:5px 0;width:40px;height:40px;box-sizing:border-box;border-radius:100%;text-align:center;line-height:45px}.opened[_ngcontent-%COMP%]   .manual-input-wrapper[_ngcontent-%COMP%]{display:flex;margin:15px;font-family:sans-serif}.opened[_ngcontent-%COMP%]   .manual-input-wrapper[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;text-align:center;font-size:10px;letter-spacing:1.5px;text-transform:uppercase;line-height:48px;width:145px;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.opened[_ngcontent-%COMP%]   .manual-input-wrapper[_ngcontent-%COMP%]   .g-input[_ngcontent-%COMP%]{border:1px solid #e8ebed;height:45px;border-radius:5px;width:100%}.opened[_ngcontent-%COMP%]   .manual-input-wrapper[_ngcontent-%COMP%]   .g-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{font-size:9px;border:none;width:100%;text-transform:uppercase;outline:none;text-align:center;letter-spacing:1px;color:#595b65;height:100%;border-radius:5px;margin:0;padding:0}\"],\n    data: {\n      animation: [trigger('colorsAnimation', [transition('void => slide-in', [\n      // Initially all colors are hidden\n      query(':enter', style({\n        opacity: 0\n      }), {\n        optional: true\n      }),\n      //slide-in animation\n      query(':enter', stagger('10ms', [animate('.3s ease-in', keyframes([style({\n        opacity: 0,\n        transform: 'translatex(-50%)',\n        offset: 0\n      }), style({\n        opacity: 0.5,\n        transform: 'translatex(-10px) scale(1.1)',\n        offset: 0.3\n      }), style({\n        opacity: 1,\n        transform: 'translatex(0)',\n        offset: 1\n      })]))]), {\n        optional: true\n      })]),\n      //popup animation\n      transition('void => popup', [query(':enter', style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), {\n        optional: true\n      }), query(':enter', stagger('10ms', [animate('500ms ease-out', keyframes([style({\n        opacity: 0.5,\n        transform: 'scale(.5)',\n        offset: 0.3\n      }), style({\n        opacity: 1,\n        transform: 'scale(1.1)',\n        offset: 0.8\n      }), style({\n        opacity: 1,\n        transform: 'scale(1)',\n        offset: 1\n      })]))]), {\n        optional: true\n      })])])]\n    }\n  });\n  return PanelComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-colors-panel',\n      animations: [trigger('colorsAnimation', [transition('void => slide-in', [\n      // Initially all colors are hidden\n      query(':enter', style({\n        opacity: 0\n      }), {\n        optional: true\n      }),\n      //slide-in animation\n      query(':enter', stagger('10ms', [animate('.3s ease-in', keyframes([style({\n        opacity: 0,\n        transform: 'translatex(-50%)',\n        offset: 0\n      }), style({\n        opacity: 0.5,\n        transform: 'translatex(-10px) scale(1.1)',\n        offset: 0.3\n      }), style({\n        opacity: 1,\n        transform: 'translatex(0)',\n        offset: 1\n      })]))]), {\n        optional: true\n      })]),\n      //popup animation\n      transition('void => popup', [query(':enter', style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), {\n        optional: true\n      }), query(':enter', stagger('10ms', [animate('500ms ease-out', keyframes([style({\n        opacity: 0.5,\n        transform: 'scale(.5)',\n        offset: 0.3\n      }), style({\n        opacity: 1,\n        transform: 'scale(1.1)',\n        offset: 0.8\n      }), style({\n        opacity: 1,\n        transform: 'scale(1)',\n        offset: 1\n      })]))]), {\n        optional: true\n      })])])],\n      template: \"<div class=\\\"opened\\\" [style]=\\\"positionString\\\" #dialog>\\n  <ng-container *ngIf=\\\"menu == 1\\\">\\n    <div class=\\\"colors\\\" [@colorsAnimation]=\\\"colorsAnimationEffect\\\">\\n      <ng-container *ngFor=\\\"let color of palette; let i = index\\\">\\n        <div class=\\\"circle wrapper color\\\">\\n          <div\\n            (click)=\\\"onColorClick(color)\\\"\\n            class=\\\"circle color circle-border\\\"\\n            [class.colornull]=\\\"!color\\\"\\n            [ngStyle]=\\\"getBackgroundColor(color)\\\"\\n          >\\n            <div *ngIf=\\\"i == this.indexSeleccionado\\\" class=\\\"selected\\\"></div>\\n          </div>\\n        </div>\\n      </ng-container>\\n      <div\\n        style=\\\"background: rgb(245 245 245); position: relative\\\"\\n        (click)=\\\"addColor()\\\"\\n        *ngIf=\\\"!hideColorPicker && this.colorPickerControls != 'only-alpha'\\\"\\n        class=\\\"circle button\\\"\\n      >\\n        <div\\n          *ngIf=\\\"this.indexSeleccionado === undefined\\\"\\n          style=\\\"\\n            position: absolute;\\n            height: 7px;\\n            width: 7px;\\n            border: 1px solid rgba(0, 0, 0, 0.03);\\n            border-radius: 100%;\\n            top: 0;\\n            right: 0;\\n          \\\"\\n          [ngStyle]=\\\"getBackgroundColor(color)\\\"\\n        ></div>\\n        <svg\\n          xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n          height=\\\"24px\\\"\\n          viewBox=\\\"0 0 24 24\\\"\\n          width=\\\"24px\\\"\\n          fill=\\\"#222222\\\"\\n        >\\n          <path d=\\\"M24 24H0V0h24v24z\\\" fill=\\\"none\\\" opacity=\\\".87\\\" />\\n          <path d=\\\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\\\" />\\n        </svg>\\n        <!-- <div class=\\\"add\\\">\\n          <icons icon=\\\"add\\\"></icons>\\n        </div> -->\\n      </div>\\n      <color-picker\\n        *ngIf=\\\"!hideColorPicker && this.colorPickerControls == 'only-alpha'\\\"\\n        [controls]=\\\"colorPickerControls\\\"\\n        [color]=\\\"hsva\\\"\\n        (colorChange)=\\\"onChangeColorPicker($event)\\\"\\n        (onAlphaChange)=\\\"onAlphaChange($event)\\\"\\n      ></color-picker>\\n    </div>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"menu == 2\\\">\\n    <div class=\\\"colors\\\" [@colorsAnimation]=\\\"colorsAnimationEffect\\\">\\n      <div class=\\\"circle wrapper\\\">\\n        <div (click)=\\\"onClickBack()\\\" class=\\\"add\\\">\\n          <svg\\n            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n            width=\\\"24\\\"\\n            height=\\\"24\\\"\\n            viewBox=\\\"0 0 24 24\\\"\\n          >\\n            <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\" />\\n            <path\\n              d=\\\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\\\"\\n            />\\n          </svg>\\n        </div>\\n      </div>\\n\\n      <ng-container *ngFor=\\\"let variant of variants\\\">\\n        <div class=\\\"circle wrapper color\\\">\\n          <div\\n            [class.colornull]=\\\"!variant\\\"\\n            (click)=\\\"changeColor(variant)\\\"\\n            class=\\\"circle circle-border\\\"\\n            [ngStyle]=\\\"{ background: variant }\\\"\\n          >\\n            <div *ngIf=\\\"isSelected(variant)\\\" class=\\\"selected\\\"></div>\\n          </div>\\n        </div>\\n      </ng-container>\\n    </div>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"menu == 3\\\">\\n    <div class=\\\"nav-wrapper\\\">\\n      <div\\n        (click)=\\\"onClickBack()\\\"\\n        class=\\\"round-button button\\\"\\n        style=\\\"float: left\\\"\\n      >\\n        <svg\\n          xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n          width=\\\"24\\\"\\n          height=\\\"24\\\"\\n          viewBox=\\\"0 0 24 24\\\"\\n        >\\n          <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\" />\\n          <path\\n            d=\\\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\\\"\\n          />\\n        </svg>\\n      </div>\\n      <button (click)=\\\"emitClose('cancel')\\\" style=\\\"float: right\\\">\\n        {{ cancelLabel }}\\n      </button>\\n      <button (click)=\\\"emitClose('accept')\\\" style=\\\"float: right\\\">\\n        {{ acceptLabel }}\\n      </button>\\n    </div>\\n    <div class=\\\"color-picker-wrapper\\\">\\n      <!-- <span [(colorPicker)]=\\\"color\\\"></span> -->\\n      <color-picker\\n        [controls]=\\\"colorPickerControls\\\"\\n        [color]=\\\"hsva\\\"\\n        (sliderChange)=\\\"onChangeColorPicker($event)\\\"\\n      ></color-picker>\\n    </div>\\n  </ng-container>\\n  <div class=\\\"manual-input-wrapper\\\" *ngIf=\\\"!hideTextInput\\\">\\n    <p (click)=\\\"nextFormat()\\\" style=\\\"cursor: pointer;\\\">{{ colorFormats[format] }}</p>\\n    <div class=\\\"g-input\\\">\\n      <input\\n        [placeholder]=\\\"placeholder\\\"\\n        type=\\\"text\\\"\\n        [value]=\\\"color\\\"\\n        [style.font-size.px]=\\\"color && color.length > 23 ? 9 : 10\\\"\\n        [style.letter-spacing.px]=\\\"color && color.length > 16 ? 0 : 1.5\\\"\\n        (keyup)=\\\"changeColorManual(paintInput.value)\\\"\\n        (keydown.enter)=\\\"emitClose('accept')\\\"\\n        #paintInput\\n      />\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\":host{position:fixed;z-index:2001}.hidden{display:none}.button{display:flex;align-items:center;justify-content:center}.top{transform:translateY(-100%)}.opened{box-sizing:border-box;box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background:#fff;width:250px;border-radius:5px;position:absolute}.opened button{border:none;font-family:inherit;font-size:12px;background-color:unset;-webkit-user-select:none;user-select:none;padding:10px;letter-spacing:1px;color:#222;border-radius:3px;line-height:20px}.opened button:hover,.opened .button:hover{background-color:#0000000d;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1);transition-property:opacity,background-color;transition-duration:.2s,.2s;transition-timing-function:cubic-bezier(.35,0,.25,1),cubic-bezier(.35,0,.25,1);transition-delay:0s,0s}.opened button:focus{outline:none}.opened .colors{display:flex;flex-wrap:wrap;align-items:center;margin:15px}.opened .colors .circle{height:34px;width:34px;box-sizing:border-box;border-radius:100%;cursor:pointer}.opened .colors .circle .add{font-size:20px;line-height:45px;text-align:center}.opened .colors .circle .selected{border:2px solid white;border-radius:100%;height:28px;width:28px;box-sizing:border-box;margin:2px}.opened .colors .circle.colornull{background:linear-gradient(135deg,rgba(236,236,236,.7) 0%,rgba(236,236,236,.7) 45%,#de0f00 50%,rgba(236,236,236,.7) 55%,rgba(236,236,236,.7) 100%)}.opened .colors .circle.wrapper{margin:0 5px 5px;flex:34px 0 0}.opened .colors .circle.button{margin:0 5px 5px}.opened .colors .circle.wrapper.color{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}.opened .colors .circle-border{border:1px solid rgba(0,0,0,.03)}.opened .color-picker-wrapper{margin:5px 15px}.opened .nav-wrapper{overflow:hidden;margin:5px}.opened .nav-wrapper .round-button{padding:5px 0;width:40px;height:40px;box-sizing:border-box;border-radius:100%;text-align:center;line-height:45px}.opened .manual-input-wrapper{display:flex;margin:15px;font-family:sans-serif}.opened .manual-input-wrapper p{margin:0;text-align:center;font-size:10px;letter-spacing:1.5px;text-transform:uppercase;line-height:48px;width:145px;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.opened .manual-input-wrapper .g-input{border:1px solid #e8ebed;height:45px;border-radius:5px;width:100%}.opened .manual-input-wrapper .g-input input{font-size:9px;border:none;width:100%;text-transform:uppercase;outline:none;text-align:center;letter-spacing:1px;color:#595b65;height:100%;border-radius:5px;margin:0;padding:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ConverterService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    click: [{\n      type: HostListener,\n      args: ['document:mousedown', ['$event']]\n    }],\n    onScroll: [{\n      type: HostListener,\n      args: ['document:scroll']\n    }],\n    onResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }],\n    top: [{\n      type: HostBinding,\n      args: ['style.top.px']\n    }],\n    left: [{\n      type: HostBinding,\n      args: ['style.left.px']\n    }],\n    panelRef: [{\n      type: ViewChild,\n      args: ['dialog']\n    }]\n  });\n})();\nconst OVERLAY_STYLES = {\n  position: 'fixed',\n  height: '100%',\n  width: '100%',\n  'z-index': 2000,\n  top: 0,\n  left: 0\n};\nlet PanelFactoryService = /*#__PURE__*/(() => {\n  class PanelFactoryService {\n    constructor(resolver, applicationRef, injector) {\n      this.resolver = resolver;\n      this.applicationRef = applicationRef;\n      this.injector = injector;\n    }\n    createPanel(attachTo, overlayClassName) {\n      if (this.componentRef != undefined) {\n        this.removePanel();\n      }\n      const factory = this.resolver.resolveComponentFactory(PanelComponent);\n      this.componentRef = factory.create(this.injector);\n      this.applicationRef.attachView(this.componentRef.hostView);\n      const domElem = this.componentRef.hostView.rootNodes[0];\n      this.overlay = document.createElement(\"div\");\n      this.overlay.id = \"ngx-colors-overlay\";\n      this.overlay.classList.add(\"ngx-colors-overlay\");\n      this.overlay.classList.add(overlayClassName);\n      Object.keys(OVERLAY_STYLES).forEach(attr => {\n        this.overlay.style[attr] = OVERLAY_STYLES[attr];\n      });\n      if (attachTo) {\n        document.getElementById(attachTo).appendChild(this.overlay);\n      } else {\n        document.body.appendChild(this.overlay);\n      }\n      this.overlay.appendChild(domElem);\n      return this.componentRef;\n    }\n    removePanel() {\n      this.applicationRef.detachView(this.componentRef.hostView);\n      this.componentRef.destroy();\n      this.overlay.remove();\n    }\n  }\n  PanelFactoryService.ɵfac = function PanelFactoryService_Factory(t) {\n    return new (t || PanelFactoryService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector));\n  };\n  PanelFactoryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PanelFactoryService,\n    factory: PanelFactoryService.ɵfac\n  });\n  return PanelFactoryService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PanelFactoryService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nlet NgxColorsTriggerDirective = /*#__PURE__*/(() => {\n  class NgxColorsTriggerDirective {\n    onClick() {\n      this.openPanel();\n    }\n    constructor(triggerRef, panelFactory, service) {\n      this.triggerRef = triggerRef;\n      this.panelFactory = panelFactory;\n      this.service = service;\n      //Main input/output of the color picker\n      // @Input() color = '#000000';\n      // @Output() colorChange:EventEmitter<string> = new EventEmitter<string>();\n      this.color = '';\n      //This defines the type of animation for the palatte.(slide-in | popup)\n      this.colorsAnimation = 'slide-in';\n      this.position = 'bottom';\n      this.attachTo = undefined;\n      this.overlayClassName = undefined;\n      this.colorPickerControls = 'default';\n      this.acceptLabel = 'ACCEPT';\n      this.cancelLabel = 'CANCEL';\n      // This event is trigger every time the selected color change\n      this.change = new EventEmitter();\n      // This event is trigger every time the user change the color using the panel\n      this.input = new EventEmitter();\n      // This event is trigger every time the user change the color using the panel\n      this.slider = new EventEmitter();\n      this.close = new EventEmitter();\n      this.open = new EventEmitter();\n      this.isDisabled = false;\n      this.onTouchedCallback = () => {};\n      this.onChangeCallback = () => {};\n    }\n    ngOnDestroy() {\n      if (this.panelRef) {\n        this.panelFactory.removePanel();\n      }\n    }\n    openPanel() {\n      if (!this.isDisabled) {\n        this.panelRef = this.panelFactory.createPanel(this.attachTo, this.overlayClassName);\n        this.panelRef.instance.iniciate(this, this.triggerRef, this.color, this.palette, this.colorsAnimation, this.format, this.hideTextInput, this.hideColorPicker, this.acceptLabel, this.cancelLabel, this.colorPickerControls, this.position, this.formats);\n      }\n      this.open.emit(this.color);\n    }\n    closePanel() {\n      this.panelFactory.removePanel();\n      this.onTouchedCallback();\n      this.close.emit(this.color);\n    }\n    setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n      this.triggerRef.nativeElement.style.opacity = isDisabled ? 0.5 : 1;\n    }\n    setColor(color, previewColor = \"\") {\n      this.writeValue(color, previewColor);\n      this.onChangeCallback(color);\n      this.input.emit(color);\n    }\n    sliderChange(color) {\n      this.slider.emit(color);\n    }\n    get value() {\n      return this.color;\n    }\n    set value(value) {\n      this.setColor(value);\n      this.onChangeCallback(value);\n    }\n    writeValue(value, previewColor = \"\") {\n      if (value !== this.color) {\n        if (this.format) {\n          let format = formats.indexOf(this.format.toLowerCase());\n          value = this.service.stringToFormat(value, format);\n        }\n        this.color = value;\n        let isCmyk = false;\n        if (value && value.startsWith('cmyk')) {\n          isCmyk = true;\n          if (!previewColor) {\n            previewColor = this.service.stringToFormat(value, ColorFormats.RGBA);\n          }\n        }\n        this.change.emit(isCmyk ? previewColor : value);\n      }\n    }\n    registerOnChange(fn) {\n      this.onChangeCallback = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouchedCallback = fn;\n    }\n  }\n  NgxColorsTriggerDirective.ɵfac = function NgxColorsTriggerDirective_Factory(t) {\n    return new (t || NgxColorsTriggerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PanelFactoryService), i0.ɵɵdirectiveInject(ConverterService));\n  };\n  NgxColorsTriggerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxColorsTriggerDirective,\n    selectors: [[\"\", \"ngx-colors-trigger\", \"\"]],\n    hostBindings: function NgxColorsTriggerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function NgxColorsTriggerDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      colorsAnimation: \"colorsAnimation\",\n      palette: \"palette\",\n      format: \"format\",\n      formats: \"formats\",\n      position: \"position\",\n      hideTextInput: \"hideTextInput\",\n      hideColorPicker: \"hideColorPicker\",\n      attachTo: \"attachTo\",\n      overlayClassName: \"overlayClassName\",\n      colorPickerControls: \"colorPickerControls\",\n      acceptLabel: \"acceptLabel\",\n      cancelLabel: \"cancelLabel\"\n    },\n    outputs: {\n      change: \"change\",\n      input: \"input\",\n      slider: \"slider\",\n      close: \"close\",\n      open: \"open\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxColorsTriggerDirective),\n      multi: true\n    }])]\n  });\n  return NgxColorsTriggerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxColorsTriggerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-colors-trigger]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgxColorsTriggerDirective),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: PanelFactoryService\n    }, {\n      type: ConverterService\n    }];\n  }, {\n    colorsAnimation: [{\n      type: Input\n    }],\n    palette: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    formats: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    hideTextInput: [{\n      type: Input\n    }],\n    hideColorPicker: [{\n      type: Input\n    }],\n    attachTo: [{\n      type: Input\n    }],\n    overlayClassName: [{\n      type: Input\n    }],\n    colorPickerControls: [{\n      type: Input\n    }],\n    acceptLabel: [{\n      type: Input\n    }],\n    cancelLabel: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    input: [{\n      type: Output\n    }],\n    slider: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    open: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\nlet NgxColorsComponent = /*#__PURE__*/(() => {\n  class NgxColorsComponent {\n    constructor(cdRef, triggerDirective) {\n      this.cdRef = cdRef;\n      this.triggerDirective = triggerDirective;\n      this.triggerDirectiveColorChangeSubscription = null;\n      //IO color\n      this.color = this.triggerDirective.color;\n    }\n    ngOnInit() {\n      this.triggerDirectiveColorChangeSubscription = this.triggerDirective.change.subscribe(color => {\n        this.color = color;\n        this.cdRef.markForCheck();\n      });\n    }\n    ngOnDestroy() {\n      if (this.triggerDirectiveColorChangeSubscription) {\n        this.triggerDirectiveColorChangeSubscription.unsubscribe();\n      }\n    }\n  }\n  NgxColorsComponent.ɵfac = function NgxColorsComponent_Factory(t) {\n    return new (t || NgxColorsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(NgxColorsTriggerDirective, 1));\n  };\n  NgxColorsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxColorsComponent,\n    selectors: [[\"ngx-colors\"]],\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"app-color-picker\"], [1, \"preview\"], [1, \"preview-background\"], [1, \"circle\", 3, \"ngStyle\"]],\n    template: function NgxColorsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"colornull\", !ctx.color);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c3, ctx.color));\n      }\n    },\n    dependencies: [i2.NgStyle],\n    styles: [\"[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]{line-height:1px;font-family:sans-serif}[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]   .preview[_ngcontent-%COMP%]{margin:2px;display:inline-block;box-sizing:border-box;border-radius:100%;background:white;cursor:pointer;padding:3px;box-shadow:0 1px 1px #0003,0 1px 1px 1px #00000024,0 1px 1px 1px #0000001f}[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]   .preview[_ngcontent-%COMP%]   .preview-background[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px;border-radius:100%}[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]   .preview[_ngcontent-%COMP%]   .circle[_ngcontent-%COMP%]{height:20px;width:20px;box-sizing:border-box;border-radius:100%;cursor:pointer}[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]   .preview[_ngcontent-%COMP%]   .circle.colornull[_ngcontent-%COMP%]{background:linear-gradient(135deg,rgba(236,236,236,.7) 0%,rgba(236,236,236,.7) 45%,#de0f00 50%,rgba(236,236,236,.7) 55%,rgba(236,236,236,.7) 100%)}[_nghost-%COMP%]   .app-color-picker[_ngcontent-%COMP%]   .preview[_ngcontent-%COMP%]   .noselected[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}\"]\n  });\n  return NgxColorsComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxColorsComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-colors',\n      template: \"<div class=\\\"app-color-picker\\\">\\n  <div class=\\\"preview\\\">\\n    <div class=\\\"preview-background\\\">\\n      <div\\n        class=\\\"circle\\\"\\n        [class.colornull]=\\\"!color\\\"\\n        [ngStyle]=\\\"{ background: color }\\\"\\n      ></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\":host .app-color-picker{line-height:1px;font-family:sans-serif}:host .app-color-picker .preview{margin:2px;display:inline-block;box-sizing:border-box;border-radius:100%;background:white;cursor:pointer;padding:3px;box-shadow:0 1px 1px #0003,0 1px 1px 1px #00000024,0 1px 1px 1px #0000001f}:host .app-color-picker .preview .preview-background{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px;border-radius:100%}:host .app-color-picker .preview .circle{height:20px;width:20px;box-sizing:border-box;border-radius:100%;cursor:pointer}:host .app-color-picker .preview .circle.colornull{background:linear-gradient(135deg,rgba(236,236,236,.7) 0%,rgba(236,236,236,.7) 45%,#de0f00 50%,rgba(236,236,236,.7) 55%,rgba(236,236,236,.7) 100%)}:host .app-color-picker .preview .noselected{background-image:linear-gradient(45deg,#ccc 25%,transparent 25%),linear-gradient(-45deg,#ccc 25%,transparent 25%),linear-gradient(45deg,transparent 75%,#ccc 75%),linear-gradient(-45deg,transparent 75%,#ccc 75%);background-size:16px 16px;background-position:0 0,0 8px,8px -8px,-8px 0px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: NgxColorsTriggerDirective,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, null);\n})();\nlet NgxColorsModule = /*#__PURE__*/(() => {\n  class NgxColorsModule {}\n  NgxColorsModule.ɵfac = function NgxColorsModule_Factory(t) {\n    return new (t || NgxColorsModule)();\n  };\n  NgxColorsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxColorsModule\n  });\n  NgxColorsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ConverterService, PanelFactoryService],\n    imports: [CommonModule]\n  });\n  return NgxColorsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxColorsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxColorsComponent, ColorPickerComponent, SliderDirective, PanelComponent, NgxColorsTriggerDirective],\n      imports: [CommonModule],\n      providers: [ConverterService, PanelFactoryService],\n      exports: [NgxColorsComponent, NgxColorsTriggerDirective]\n    }]\n  }], null, null);\n})();\nfunction validColorValidator() {\n  return control => {\n    const value = control.value;\n    if (!value) {\n      return null;\n    }\n    const rgbTest = /^\\s*rgba?\\(\\s*(1?\\d{1,2}|2[0-4]\\d|25[0-5])\\s*,\\s*(1?\\d{1,2}|2[0-4]\\d|25[0-5])\\s*,\\s*(1?\\d{1,2}|2[0-4]\\d|25[0-5])\\s*(,\\s*(0\\.\\d{1,2}|1))?\\s*\\)\\s*$/i;\n    const hslTest = /^\\s*hsla?\\(\\s*([0-2]?\\d{1,2}|3[0-5]\\d|360)\\s*,\\s*(0|[1-9]{1,2}|100)\\%\\s*,\\s*(0|[1-9]{1,2}|100)\\%\\s*(,\\s*(0\\.\\d{1,2}|1))?\\s*\\)\\s*$/i;\n    const hexTest = /^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n    const colorValid = rgbTest.test(value) || hslTest.test(value) || hexTest.test(value);\n    return !colorValid ? {\n      invalidColor: true\n    } : null;\n  };\n}\n\n/*\n * Public API Surface of ngx-colors\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxColorsColor, NgxColorsComponent, NgxColorsModule, NgxColorsTriggerDirective, validColorValidator };\n//# sourceMappingURL=ngx-colors.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}