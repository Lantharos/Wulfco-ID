{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, PLATFORM_ID, forwardRef, Component, Inject, Input, ViewChild, Output, Directive, HostListener, Injectable, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isPlatformServer, isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\nconst _c0 = [\"captcha\"];\nconst CAPTCHA_CONFIG = new InjectionToken('CAPTCHA_CONFIG');\n\n/**\n * Load the hCaptcha script by appending a script element to the head element.\n * The script won't be loaded again if it has already been loaded.\n * Async and defer are set to prevent blocking the renderer while loading hCaptcha.\n */\nfunction loadHCaptcha(languageCode) {\n  return new Observable(observer => {\n    // No window object (ssr)\n    if (!window) {\n      return;\n    }\n    // The hCaptcha script has already been loaded\n    if (typeof window.hcaptcha !== 'undefined') {\n      observer.next();\n      observer.complete();\n      return;\n    }\n    let src = 'https://hcaptcha.com/1/api.js?render=explicit';\n    // Set language code\n    if (languageCode) {\n      src += `&hl=${languageCode}`;\n    }\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    script.defer = true;\n    script.onerror = e => observer.error(e);\n    script.onload = () => {\n      observer.next();\n      observer.complete();\n    };\n    document.head.appendChild(script);\n  });\n}\nlet NgHcaptchaComponent = /*#__PURE__*/(() => {\n  class NgHcaptchaComponent {\n    constructor(config, zone, platformId) {\n      this.config = config;\n      this.zone = zone;\n      this.platformId = platformId;\n      this.verify = new EventEmitter();\n      this.expired = new EventEmitter();\n      this.error = new EventEmitter();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n    }\n    // Initialization\n    ngOnInit() {\n      // Use language code from module config when input parameter is not set\n      if (!this.languageCode) {\n        this.languageCode = this.config.languageCode;\n      }\n      // Do not load hCaptcha if platform is server\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\n        setTimeout(context => {\n          // Configure hCaptcha\n          const options = {\n            sitekey: context.siteKey || context.config.siteKey,\n            theme: context.theme,\n            size: context.size,\n            tabindex: context.tabIndex,\n            callback: res => {\n              context.zone.run(() => context.onVerify(res));\n            },\n            'expired-callback': res => {\n              context.zone.run(() => context.onExpired(res));\n            },\n            'error-callback': err => {\n              context.zone.run(() => context.onError(err));\n            }\n          };\n          // Render hCaptcha using the defined options\n          context.widgetId = window.hcaptcha.render(context.captcha.nativeElement, options);\n        }, 50, this);\n      }, error => {\n        console.error('Failed to load hCaptcha script', error);\n      });\n    }\n    ngOnDestroy() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      this.captcha$.unsubscribe();\n    }\n    // ControlValueAccessor implementation\n    writeValue(value) {\n      // Needs to be implemented to make the FormGroup's reset function work\n      this.value = value;\n      // Reset hCaptcha.\n      // We need to check whether window.hcaptcha is defined because\n      // writeValue(value: any) can be called before hCaptcha has been intialized.\n      if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {\n        window.hcaptcha.reset(this.widgetId);\n      }\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    reset() {\n      window.hcaptcha.reset(this.widgetId);\n    }\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      this._value = value;\n      this.onChange(value);\n      this.onTouched();\n    }\n    // Internal functions\n    /**\n     * Is called when the verification was successful\n     * @param response The verification token\n     */\n    onVerify(response) {\n      this.value = response;\n      this.verify.emit(response);\n    }\n    /**\n     * Is called when the verification has expired\n     * @param response The verification response\n     */\n    onExpired(response) {\n      this.expired.emit(response);\n    }\n    /**\n     * Is called when an error occurs during the verification process\n     * @param error The error returned by hCaptcha\n     */\n    onError(error) {\n      this.error.emit(error);\n    }\n    static #_ = this.ɵfac = function NgHcaptchaComponent_Factory(t) {\n      return new (t || NgHcaptchaComponent)(i0.ɵɵdirectiveInject(CAPTCHA_CONFIG), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n    };\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgHcaptchaComponent,\n      selectors: [[\"ng-hcaptcha\"]],\n      viewQuery: function NgHcaptchaComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captcha = _t.first);\n        }\n      },\n      inputs: {\n        siteKey: \"siteKey\",\n        theme: \"theme\",\n        size: \"size\",\n        tabIndex: \"tabIndex\",\n        languageCode: \"languageCode\"\n      },\n      outputs: {\n        verify: \"verify\",\n        expired: \"expired\",\n        error: \"error\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgHcaptchaComponent),\n        multi: true\n      }])],\n      decls: 2,\n      vars: 0,\n      consts: [[\"captcha\", \"\"], [1, \"h-captcha\"]],\n      template: function NgHcaptchaComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 1, 0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return NgHcaptchaComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-hcaptcha',\n      template: '<div #captcha class=\"h-captcha\"></div>',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgHcaptchaComponent),\n        multi: true\n      }]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CAPTCHA_CONFIG]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }], {\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    languageCode: [{\n      type: Input\n    }],\n    captcha: [{\n      type: ViewChild,\n      args: ['captcha', {\n        static: true\n      }]\n    }],\n    verify: [{\n      type: Output\n    }],\n    expired: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }]\n  });\n})();\nlet NgHcaptchaInvisibleButtonDirective = /*#__PURE__*/(() => {\n  class NgHcaptchaInvisibleButtonDirective {\n    constructor(elRef, config, zone, platformId) {\n      this.elRef = elRef;\n      this.config = config;\n      this.zone = zone;\n      this.platformId = platformId;\n      this.verify = new EventEmitter();\n      this.expired = new EventEmitter();\n      this.error = new EventEmitter();\n      this.click = new EventEmitter();\n    }\n    ngOnInit() {\n      // Use language code from module config when input parameter is not set\n      if (!this.languageCode) {\n        this.languageCode = this.config.languageCode;\n      }\n      // Do not load hCaptcha if platform is server\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      // Load the hCaptcha script\n      this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\n        setTimeout(context => {\n          // Configure hCaptcha\n          const options = {\n            sitekey: context.siteKey || context.config.siteKey,\n            size: 'invisible',\n            callback: res => {\n              context.zone.run(() => context.onVerify(res));\n            },\n            'expired-callback': res => {\n              context.zone.run(() => context.onExpired(res));\n            },\n            'error-callback': err => {\n              context.zone.run(() => context.onError(err));\n            }\n          };\n          // Render hCaptcha using the defined options\n          context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);\n        }, 50, this);\n      });\n    }\n    ngOnDestroy() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      this.captcha$.unsubscribe();\n    }\n    onClick(event) {\n      if (event.hCaptchaToken) {\n        return;\n      }\n      this.lastClickEvent = event;\n      event.stopPropagation();\n      event.preventDefault();\n      event.cancelBubble = true;\n      event.stopImmediatePropagation();\n      // Only execute hCaptcha if platform is browser\n      if (isPlatformBrowser(this.platformId)) {\n        window.hcaptcha.execute(this.widgetId);\n      }\n      return false;\n    }\n    reset() {\n      window.hcaptcha.reset(this.widgetId);\n    }\n    /**\n     * Is called when the verification was successful\n     * @param response The verification token\n     */\n    onVerify(response) {\n      const event = this.lastClickEvent || {};\n      event.hCaptchaToken = response;\n      this.click.emit(event);\n      this.verify.emit(response);\n    }\n    /**\n     * Is called when the verification has expired\n     * @param response The verification response\n     */\n    onExpired(response) {\n      this.expired.emit(response);\n    }\n    /**\n     * Is called when an error occurs during the verification process\n     * @param error The error returned by hCaptcha\n     */\n    onError(error) {\n      this.error.emit(error);\n    }\n    static #_ = this.ɵfac = function NgHcaptchaInvisibleButtonDirective_Factory(t) {\n      return new (t || NgHcaptchaInvisibleButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CAPTCHA_CONFIG), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n    };\n    static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgHcaptchaInvisibleButtonDirective,\n      selectors: [[\"\", \"ngHcaptchaInvisibleButton\", \"\"]],\n      hostBindings: function NgHcaptchaInvisibleButtonDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function NgHcaptchaInvisibleButtonDirective_click_HostBindingHandler($event) {\n            return ctx.onClick($event);\n          });\n        }\n      },\n      inputs: {\n        siteKey: \"siteKey\",\n        languageCode: \"languageCode\"\n      },\n      outputs: {\n        verify: \"verify\",\n        expired: \"expired\",\n        error: \"error\",\n        click: \"click\"\n      }\n    });\n  }\n  return NgHcaptchaInvisibleButtonDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaInvisibleButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngHcaptchaInvisibleButton]'\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CAPTCHA_CONFIG]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }], {\n    siteKey: [{\n      type: Input\n    }],\n    languageCode: [{\n      type: Input\n    }],\n    verify: [{\n      type: Output\n    }],\n    expired: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    click: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nlet NgHcaptchaService = /*#__PURE__*/(() => {\n  class NgHcaptchaService {\n    constructor(captchaConfig, zone) {\n      this.captchaConfig = captchaConfig;\n      this.zone = zone;\n    }\n    verify() {\n      return new Observable(subscriber => {\n        loadHCaptcha(this.captchaConfig.languageCode).subscribe(() => {\n          setTimeout(context => {\n            // Create hCaptcha element\n            if (!this.hCaptchaElement) {\n              this.hCaptchaElement = document.createElement('div');\n              document.body.appendChild(this.hCaptchaElement);\n            }\n            // Render hCaptcha using the defined options\n            if (!this.hCaptchaWidgetId) {\n              // Configure hCaptcha\n              const options = {\n                sitekey: this.captchaConfig.siteKey,\n                size: 'invisible',\n                callback: res => {\n                  this.zone.run(() => {\n                    subscriber.next(res);\n                    subscriber.complete();\n                    this.resetHcaptcha();\n                  });\n                },\n                'expired-callback': res => {\n                  this.zone.run(() => {\n                    subscriber.error(res);\n                    this.resetHcaptcha();\n                  });\n                },\n                'error-callback': err => {\n                  this.zone.run(() => {\n                    subscriber.error(err);\n                    this.resetHcaptcha();\n                  });\n                }\n              };\n              this.hCaptchaWidgetId = window.hcaptcha.render(this.hCaptchaElement, options);\n            }\n            // Immediately execute hCaptcha\n            window.hcaptcha.execute(this.hCaptchaWidgetId);\n          }, 50, this);\n        });\n      });\n    }\n    resetHcaptcha() {\n      window.hcaptcha.remove(this.hCaptchaWidgetId);\n      this.hCaptchaElement = null;\n      this.hCaptchaWidgetId = null;\n    }\n    static #_ = this.ɵfac = function NgHcaptchaService_Factory(t) {\n      return new (t || NgHcaptchaService)(i0.ɵɵinject(CAPTCHA_CONFIG), i0.ɵɵinject(i0.NgZone));\n    };\n    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgHcaptchaService,\n      factory: NgHcaptchaService.ɵfac\n    });\n  }\n  return NgHcaptchaService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CAPTCHA_CONFIG]\n    }]\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nlet NgHcaptchaModule = /*#__PURE__*/(() => {\n  class NgHcaptchaModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgHcaptchaModule,\n        providers: [NgHcaptchaService, {\n          provide: CAPTCHA_CONFIG,\n          useValue: config || []\n        }]\n      };\n    }\n    static #_ = this.ɵfac = function NgHcaptchaModule_Factory(t) {\n      return new (t || NgHcaptchaModule)();\n    };\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgHcaptchaModule\n    });\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return NgHcaptchaModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\n      exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng-hcaptcha\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CAPTCHA_CONFIG, NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective, NgHcaptchaModule, NgHcaptchaService, loadHCaptcha };\n//# sourceMappingURL=ng-hcaptcha.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}