{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction NgxSkeletonLoaderComponent_div_0_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"appearance  === 'custom-content'\"]);\n  }\n}\nconst _c0 = (a0, a1, a2, a3, a4) => ({\n  \"custom-content\": a0,\n  circle: a1,\n  progress: a2,\n  \"progress-dark\": a3,\n  pulse: a4\n});\nfunction NgxSkeletonLoaderComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, NgxSkeletonLoaderComponent_div_0_ng_content_1_Template, 1, 0, \"ng-content\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction5(5, _c0, ctx_r0.appearance === \"custom-content\", ctx_r0.appearance === \"circle\", ctx_r0.animation === \"progress\", ctx_r0.animation === \"progress-dark\", ctx_r0.animation === \"pulse\"))(\"ngStyle\", ctx_r0.theme);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-valuetext\", ctx_r0.loadingText);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.appearance === \"custom-content\");\n  }\n}\nconst _c1 = [\"*\"];\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\nlet NgxSkeletonLoaderComponent = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderComponent {\n    constructor(config) {\n      this.config = config;\n      const {\n        appearance = 'line',\n        animation = 'progress',\n        theme = null,\n        loadingText = 'Loading...',\n        count = 1,\n        ariaLabel = 'loading'\n      } = config || {};\n      this.appearance = appearance;\n      this.animation = animation;\n      this.theme = theme;\n      this.loadingText = loadingText;\n      this.count = count;\n      this.items = [];\n      this.ariaLabel = ariaLabel;\n    }\n    ngOnInit() {\n      this.validateInputValues();\n    }\n    validateInputValues() {\n      // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n      if (!/^\\d+$/.test(`${this.count}`)) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n        }\n        this.count = 1;\n      }\n      //Force count to 1 when custom-content is used\n      if (this.appearance === 'custom-content') {\n        // Shows error message only in Development\n        if (isDevMode() && this.count !== 1) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` enforces elements with \"custom-content\" appearance as DOM nodes. Forcing \"count\" to \"1\".`);\n          this.count = 1;\n        }\n      }\n      this.items.length = this.count;\n      const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n      if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n        }\n        this.animation = 'progress';\n      }\n      if (['circle', 'line', 'custom-content', ''].indexOf(String(this.appearance)) === -1) {\n        // Shows error message only in Development\n        if (isDevMode()) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or custom-content or empty string. Forcing default to \"''\".`);\n        }\n        this.appearance = '';\n      }\n      // This code is not using optional chaining since it's only supported on Angular CLI v12\n      //  - more details in this comment https://github.com/angular/angular-cli/issues/20471#issuecomment-815599616\n      // Which raises issues on the consumer's side. E.G: https://github.com/willmendesneto/ngx-skeleton-loader/issues/150#issuecomment-1638612329\n      const {\n        theme\n      } = this.config || {};\n      if (!!theme && !!theme.extendsFromRoot && this.theme !== null) {\n        // Shows error message only in Development\n        this.theme = {\n          ...this.config.theme,\n          ...this.theme\n        };\n      }\n    }\n    ngOnChanges(changes) {\n      // Avoiding multiple calls for the same input in case there's no changes in the fields\n      // Checking if the fields that require validation are available and if they were changed\n      // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n      if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n        return;\n      }\n      this.validateInputValues();\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function NgxSkeletonLoaderComponent_Factory(t) {\n      return new (t || NgxSkeletonLoaderComponent)(i0.ɵɵdirectiveInject(NGX_SKELETON_LOADER_CONFIG, 8));\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgxSkeletonLoaderComponent,\n      selectors: [[\"ngx-skeleton-loader\"]],\n      inputs: {\n        count: \"count\",\n        loadingText: \"loadingText\",\n        appearance: \"appearance\",\n        animation: \"animation\",\n        ariaLabel: \"ariaLabel\",\n        theme: \"theme\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"skeleton-loader\", \"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"-1\", 3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"skeleton-loader\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngIf\"]],\n      template: function NgxSkeletonLoaderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, NgxSkeletonLoaderComponent_div_0_Template, 2, 11, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngForOf\", ctx.items);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgStyle],\n      styles: [\".skeleton-loader[_ngcontent-%COMP%]{box-sizing:border-box;overflow:hidden;position:relative;background:rgb(239,241,246) no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader[_ngcontent-%COMP%]:after, .skeleton-loader[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.circle[_ngcontent-%COMP%]{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{transform:translateZ(0)}.skeleton-loader.progress[_ngcontent-%COMP%]:after, .skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:after, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{animation:_ngcontent-%COMP%_progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content[_ngcontent-%COMP%]{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.custom-content[_ngcontent-%COMP%], .skeleton-loader.progress[_ngcontent-%COMP%]:before{animation:none}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.custom-content[_ngcontent-%COMP%]{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes _ngcontent-%COMP%_progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes _ngcontent-%COMP%_pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\"],\n      changeDetection: 0\n    });\n  }\n  return NgxSkeletonLoaderComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-skeleton-loader',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"-1\\\"\\n  [ngClass]=\\\"{\\n    'custom-content': appearance === 'custom-content',\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n  <ng-content *ngIf=\\\"appearance  === 'custom-content'\\\"></ng-content>\\n</div>\\n\",\n      styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:rgb(239,241,246) no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translateZ(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.custom-content,.skeleton-loader.progress:before{animation:none}.skeleton-loader.progress:before,.skeleton-loader.progress-dark,.skeleton-loader.custom-content{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_SKELETON_LOADER_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    count: [{\n      type: Input\n    }],\n    loadingText: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\nlet NgxSkeletonLoaderModule = /*#__PURE__*/(() => {\n  class NgxSkeletonLoaderModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgxSkeletonLoaderModule,\n        providers: [{\n          provide: NGX_SKELETON_LOADER_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n    /** @nocollapse */\n    static #_ = this.ɵfac = function NgxSkeletonLoaderModule_Factory(t) {\n      return new (t || NgxSkeletonLoaderModule)();\n    };\n    /** @nocollapse */\n    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxSkeletonLoaderModule\n    });\n    /** @nocollapse */\n    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return NgxSkeletonLoaderModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxSkeletonLoaderComponent],\n      imports: [CommonModule],\n      exports: [NgxSkeletonLoaderComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule };\n//# sourceMappingURL=ngx-skeleton-loader.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}