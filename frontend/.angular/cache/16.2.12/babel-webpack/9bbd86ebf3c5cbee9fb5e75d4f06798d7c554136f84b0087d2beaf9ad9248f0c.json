{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport CryptoJSW from '@originjs/crypto-js-wasm';\nconst serverPublicKey = '-----BEGIN PUBLIC KEY-----\\n' + 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/nFSX024G7R7xUrWl6Y\\n' + 'gJ8koN5/WAiYVI0zEyD8iv81yZmCnx3maEzVkz4ZWUUvOtnAVzMXYTBls7yDENpf\\n' + 'ATDW3xmiLVOzy0Obld/BQnuTF+I7+5frWwi9FLlgNnYLsXygVjSYNhMwg0PU0Cip\\n' + 'qQy+Vy+TAnUeyc56WTwNAPQs5AP/+/3NZIGM39AACUYvvU186jBcWamZBMhxjiN5\\n' + 'gxR1clgR73V0NLx43Yi7TjWvp5GKapwHi3D2GerTbzMkTtJEf3G6AuEem/S2wOVt\\n' + '+KO7zR/avzTecOemBW7iKx3gWUFdamrXfR+qX+iCpfNAJYN6Pa5AExJv/tGqEJdU\\n' + 'YQIDAQAB\\n' + '-----END PUBLIC KEY-----\\n';\nconst serverPrivateKey = '-----BEGIN PRIVATE KEY-----\\n' + 'MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDL+cVJfTbgbtHv\\n' + 'FStaXpiAnySg3n9YCJhUjTMTIPyK/zXJmYKfHeZoTNWTPhlZRS862cBXMxdhMGWz\\n' + 'vIMQ2l8BMNbfGaItU7PLQ5uV38FCe5MX4jv7l+tbCL0UuWA2dguxfKBWNJg2EzCD\\n' + 'Q9TQKKmpDL5XL5MCdR7JznpZPA0A9CzkA//7/c1kgYzf0AAJRi+9TXzqMFxZqZkE\\n' + 'yHGOI3mDFHVyWBHvdXQ0vHjdiLtONa+nkYpqnAeLcPYZ6tNvMyRO0kR/cboC4R6b\\n' + '9LbA5W34o7vNH9q/NN5w56YFbuIrHeBZQV1qatd9H6pf6IKl80Alg3o9rkATEm/+\\n' + '0aoQl1RhAgMBAAECggEAAxfauTZoDnePwRo8lJEVAJ+pMglTEWDb/S2WUIbHsvc+\\n' + 'ImcCDJYAUvpAo4wlspgH0ygkhbiqykNYyiTPMK0RvhZhWR5t5QBnxxV+Nq50eKTK\\n' + 'wmogsmbc36izxAHa/ChxHUlrCF5MJUcdjWK0x6Ko4/04pmDR0A/k83bT8yYjz60H\\n' + '9uCKIuz24Cnws3lLz3W8SjyLOphrWlhEEU24KqtkO8Liwvbrqq4/ZmQ/kPZ75Twz\\n' + 'Hh30CFPmvHXF7d07SdLkavVsf6P5ivYuO0p/VCdW0zcp80MtRi9/t9VgsZTqMmwK\\n' + '2RyiRYJqE5YDxNqbFUHFQ/jp19pwVnVWEBuwEp8HEwKBgQD4TT9+WLgkXp7zNjvq\\n' + '+8gixW+tB7m0XpRXLsbWD5iFeYFXsQ83Vuheag9kKEdgyXwt5NVvF40H8NSJzSt2\\n' + 'bSE7hDZ4Q84qrMphZqL3xSVbiTfbMhbR+eo68QCYCpRX4ucFOEgUCrpWEoIGIa2E\\n' + 'OOVY3x//wpqJgGpUIa67ByT9jwKBgQDSTLW8CJB0fB9tCS/6lXy9xFk/r2E/KP0x\\n' + '+fOpj75IA8qI6E4kwVumekUynqkRx3VepabnLR/PpHCeXYkECjksGnV4lgQxuCEq\\n' + 'IfDyokfpl+iX5hbvQw2dck/B33p5R8Qo1n4Pgh2SdcwhdwSdsadKpDvFf8UOet7t\\n' + 'QTAcKgF3DwKBgGLokpRHzwJd1r9XKUMPjMedEkFAxI6+5iRcc8QtbjotDoLZ+w+2\\n' + 'RNXnNb5V9Sju2dKGRyb7oKg7HM7PtbJ1AjntDq2VhPim3+8wrVY5aAowfNmJ+GEo\\n' + 'Rk+4VN47yJ/BuPjxVHT3WQaUVMsQe0giSem+58Y/xMNlLfXZfPrve6KtAoGAERpw\\n' + 'BVTk+rRFkgaXQlf6Byz63TUUQaDBxti/OmEYZp74T94kzNR08bsr+Yvx0CJap1Ht\\n' + 'mwuOdMK47ghJZmy2baHRP/dja++/sr+D6xfLpXHXVtM9tkPLzaxIVEoqmcZ+a5vW\\n' + 'MMiyQwEVkvstAu453tYwjkVv71eK3dzZXtEDwX0CgYAP18EKqTrleWi9qBqxFmap\\n' + 'FBcMmDVW1hfYYj/Xh45Nk1HnD6qLSVxnuy+vAkv1ww5cD1xyKr1Frrni4yR47kgO\\n' + 'L+nlhUhERI87ai1EhNamwdKZRz1zBByx7T770iJpNaY+tF1duVkMGzQ3oHWgACRu\\n' + 'a7WnPBId5ODCK6UeZfkBhg==\\n' + '-----END PRIVATE KEY-----\\n';\nfunction wordToByteArray(wordArray) {\n  var byteArray = [];\n  for (var i = 0; i < wordArray.sigBytes; ++i) {\n    var word = wordArray[i];\n    for (var j = 3; j >= 0; --j) {\n      byteArray.push(word >> 8 * j & 0xFF);\n    }\n  }\n  return byteArray;\n}\nfunction byteArrayToString(byteArray) {\n  var str = \"\";\n  for (var i = 0; i < byteArray.length; ++i) {\n    str += escape(String.fromCharCode(byteArray[i]));\n  }\n  return str;\n}\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string, iv: number[]}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      const symmetricKey = CryptoJSW.lib.WordArray.random(128 / 8);\n      const iv = CryptoJSW.lib.WordArray.random(128 / 8);\n      const encryptedData = CryptoJSW.AES.encrypt(JSON.stringify({\n        string: \"hi\"\n      }), symmetricKey, {\n        iv: iv\n      });\n      const b = CryptoJSW.AES.decrypt(encryptedData.toString(CryptoJSW.format.OpenSSL), CryptoJSW.enc.Base64.parse(CryptoJSW.enc.Base64.stringify(symmetricKey)), {\n        iv: CryptoJSW.enc.Base64.parse(CryptoJSW.enc.Base64.stringify(iv)),\n        format: CryptoJSW.format.OpenSSL\n      });\n      console.log({\n        \"response\": b.toString()\n      });\n      const encryptedSymmetricKey = CryptoJSW.RSA.encrypt(CryptoJSW.enc.Base64.stringify(symmetricKey), {\n        key: serverPublicKey,\n        isPublicKey: true,\n        encryptPadding: \"OAEP\",\n        hashAlgo: \"sha256\"\n      });\n      const encryptedData2 = \"eyJzdHJpbmciOiJoaSJ9AQ==\";\n      const encryptedSymmetricKey2 = \"24,201,74,168,253,102,156,67,178,104,25,133,92,53,37,78,12,86,45,102,22,113,83,25,11,57,77,6,100,36,125,209,164,141,55,23,137,212,10,157,58,84,33,226,237,254,128,221,44,32,247,61,84,121,212,244,200,30,165,204,87,203,109,87,73,54,184,87,139,196,17,95,179,238,169,157,92,113,212,63,191,110,155,163,155,56,183,176,132,231,200,71,130,4,50,98,209,136,90,85,60,185,146,254,223,99,231,2,233,236,161,224,75,89,247,118,28,207,8,1,208,22,52,245,195,55,123,104,41,138,222,44,159,13,157,187,145,82,206,70,198,188,177,186,64,190,130,168,151,235,146,33,233,158,122,183,3,118,202,245,52,192,72,195,220,230,116,242,27,226,79,137,228,109,143,107,119,102,84,46,247,169,103,115,117,170,145,133,83,227,157,89,144,206,80,57,236,4,132,128,205,50,152,143,192,154,45,171,224,50,222,214,113,110,45,110,199,248,177,151,174,75,15,215,110,127,103,173,131,175,118,72,130,146,162,173,107,111,4,82,145,198,145,157,126,97,103,95,128,90,201,47,138,8,134,177\";\n      const iv2 = \"4bdmP0Ld1zTLKrQhdnxtiA==\";\n      const symmetricKeyBuffer = encryptedSymmetricKey2.split(\",\").map(num => parseInt(num));\n      const decryptedSymmetricKeyBuffer = CryptoJSW.RSA.decrypt(new Uint8Array(symmetricKeyBuffer), {\n        key: serverPrivateKey,\n        isPublicKey: false,\n        hashAlgo: \"sha256\",\n        encryptPadding: \"OAEP\"\n      });\n      const keyWordsBase = new TextDecoder().decode(decryptedSymmetricKeyBuffer);\n      const data2 = CryptoJSW.AES.decrypt(CryptoJSW.format.OpenSSL.parse(encryptedData2), CryptoJSW.enc.Base64.parse(keyWordsBase), {\n        iv: CryptoJSW.enc.Base64.parse(iv2),\n        format: CryptoJSW.format.OpenSSL\n      });\n      console.log({\n        \"response\": data2.toString(CryptoJSW.enc.Utf8)\n      });\n      return {\n        encryptedData: CryptoJSW.format.OpenSSL.stringify(encryptedData),\n        encryptedSymmetricKey: encryptedSymmetricKey.toString(),\n        iv: CryptoJSW.enc.Base64.stringify(iv)\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}