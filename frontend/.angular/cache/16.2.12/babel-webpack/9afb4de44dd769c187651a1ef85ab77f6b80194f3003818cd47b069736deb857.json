{"ast":null,"code":"import { OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, Injector } from '@angular/core';\nimport { DialogComponent } from './dialog-component/dialog.component';\nimport { OVERLAY_REF, OVERLAY_COMPONENT } from './dialog-component/dialog-token';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nexport let PopupService = /*#__PURE__*/(() => {\n  class PopupService {\n    overlay;\n    injector;\n    overlayRef;\n    confirmFunction;\n    cancelFunction;\n    component;\n    constructor(overlay, injector) {\n      this.overlay = overlay;\n      this.injector = injector;\n    }\n    open(component, confirmationFunction, cancelFunction) {\n      if (this.overlayRef?.hasAttached()) {\n        this.close();\n      }\n      this.confirmFunction = confirmationFunction;\n      this.cancelFunction = cancelFunction;\n      this.component = component;\n      const overlayConfig = this.getOverlayConfig();\n      this.overlayRef = this.overlay.create(overlayConfig);\n      const injector = Injector.create({\n        parent: this.injector,\n        providers: [{\n          provide: OVERLAY_REF,\n          useValue: this.overlayRef\n        }, {\n          provide: OVERLAY_COMPONENT,\n          useValue: component\n        }]\n      });\n      const dialogRef = new ComponentPortal(DialogComponent, null, injector);\n      this.overlayRef.attach(dialogRef);\n      this.overlayRef.backdropClick().subscribe(() => this.close());\n    }\n    close() {\n      this.overlayRef?.detach();\n      this.overlayRef?.dispose();\n    }\n    confirm() {\n      // @ts-ignore\n      const values = this.component.getValues();\n      console.log(values);\n      this.confirmFunction?.(values);\n      this.close();\n    }\n    cancel() {\n      this.cancelFunction?.();\n      this.close();\n    }\n    getOverlayConfig() {\n      const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();\n      return new OverlayConfig({\n        hasBackdrop: true,\n        backdropClass: 'backdrop',\n        panelClass: 'custom-overlay-pane-class',\n        scrollStrategy: this.overlay.scrollStrategies.block(),\n        positionStrategy\n      });\n    }\n    static ɵfac = function PopupService_Factory(t) {\n      return new (t || PopupService)(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i0.Injector));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PopupService,\n      factory: PopupService.ɵfac\n    });\n  }\n  return PopupService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopupService, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Overlay\n  }, {\n    type: i0.Injector\n  }], null);\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}