{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { config } from \"../config\";\nclass KeyManagment {\n  fetchPublicKey() {\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(config.api_url + \"/public-key\");\n      const base64Key = yield response.text();\n      const binaryKey = forge.util.decode64(base64Key);\n      const spki = forge.asn1.fromDer(binaryKey);\n      return forge.pki.publicKeyFromAsn1(spki);\n    })();\n  }\n}\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string, iv: number[]}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      const KeyManager = new KeyManagment();\n      const symmetricKey = yield crypto.subtle.generateKey({\n        name: \"AES-CBC\",\n        length: 256\n      },\n      // 256-bit key\n      true,\n      // extractable\n      [\"encrypt\", \"decrypt\"] // key usages\n      );\n\n      const iv = crypto.getRandomValues(new Uint8Array(16)); // 16 bytes for AES-CBC\n      const encoder = new TextEncoder(); // For text conversions\n      const cipherText = yield crypto.subtle.encrypt({\n        name: \"AES-CBC\",\n        iv\n      }, symmetricKey, encoder.encode(JSON.stringify({\n        string: data\n      })));\n      // Key Encryption (RSA)\n      const importedPublicKey = yield KeyManager.importPublicKey(serverPublicKey);\n      const encryptedKey = yield crypto.subtle.encrypt({\n        name: \"RSA-OAEP\"\n      }, importedPublicKey, new Uint8Array(yield crypto.subtle.exportKey(\"raw\", symmetricKey)) // Export symmetric key as raw bytes\n      );\n      // Encode for transmission\n      const encryptedDataBase64 = btoa(String.fromCharCode(...new Uint8Array(cipherText)));\n      const encryptedKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(encryptedKey)));\n      const ivBase64 = btoa(String.fromCharCode(...new Uint8Array(iv)));\n      return {\n        encryptedData: encryptedDataBase64,\n        encryptedSymmetricKey: encryptedKeyBase64,\n        iv: ivBase64\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}