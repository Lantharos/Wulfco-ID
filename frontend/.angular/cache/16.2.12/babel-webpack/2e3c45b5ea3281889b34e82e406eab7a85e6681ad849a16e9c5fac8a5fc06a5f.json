{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { config } from \"../config\";\nclass KeyManagment {\n  base64SpkiToUint8Array(base64Spki) {\n    const binaryStr = atob(base64Spki);\n    const bytes = new Uint8Array(binaryStr.length);\n    for (let i = 0; i < binaryStr.length; i++) {\n      bytes[i] = binaryStr.charCodeAt(i);\n    }\n    return bytes;\n  }\n  fetchPublicKey() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const response = yield fetch(config.api_url + \"/public-key\");\n      const base64Key = yield response.json();\n      // Assuming Base64-encoded ASN.1 DER format\n      const spkiKey = _this.base64SpkiToUint8Array(base64Key.publicKey); // (Implementation below)\n      return yield crypto.subtle.importKey(\"spki\", spkiKey, {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\"\n      },\n      // Make sure this matches backend padding\n      false, [\"encrypt\"]);\n    })();\n  }\n}\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string, iv: number[]}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      const KeyManager = new KeyManagment();\n      const symmetricKey = yield crypto.subtle.generateKey({\n        name: \"AES-CBC\",\n        length: 256\n      },\n      // 256-bit key\n      true,\n      // extractable\n      [\"encrypt\", \"decrypt\"] // key usages\n      );\n\n      const iv = crypto.getRandomValues(new Uint8Array(16)); // 16 bytes for AES-CBC\n      const encoder = new TextEncoder(); // For text conversions\n      const cipherText = yield crypto.subtle.encrypt({\n        name: \"AES-CBC\",\n        iv\n      }, symmetricKey, encoder.encode(JSON.stringify({\n        string: data\n      })));\n      // Key Encryption (RSA)\n      const publicKey = yield KeyManager.fetchPublicKey();\n      const encryptedKey = yield crypto.subtle.encrypt({\n        name: \"RSA-OAEP\"\n      }, publicKey, new Uint8Array(yield crypto.subtle.exportKey(\"raw\", symmetricKey)) // Export symmetric key as raw bytes\n      );\n      // Encode for transmission\n      const encryptedDataBase64 = btoa(String.fromCharCode(...new Uint8Array(cipherText)));\n      const encryptedKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(encryptedKey)));\n      const ivBase64 = btoa(String.fromCharCode(...new Uint8Array(iv)));\n      return {\n        encryptedData: encryptedDataBase64,\n        encryptedSymmetricKey: encryptedKeyBase64,\n        iv: ivBase64\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}