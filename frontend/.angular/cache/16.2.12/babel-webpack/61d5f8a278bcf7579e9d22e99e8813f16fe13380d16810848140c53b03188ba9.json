{"ast":null,"code":"'use strict';\n\nif (!WebAssembly) {\n  throw new Error('WebAssembly not supported here.');\n}\nvar loadModule = require('./generated/emscripten-runner.js');\nvar wasmBinary = require('./generated/argon2.wasm.js');\nvar Module = {\n  printErr: console.error,\n  setStatus: console.log,\n  wasmBinary: wasmBinary\n  // TODO: set these to avoid using base64 everywhere?\n  // wasmBinaryFile: root + 'dist/argon2.wasm',\n  // locateFile: function(file) { return (args.distPath || '') + '/' + file; }\n};\n\n/**\n* Argon2 hash\n* @param {string} params.pass - password string\n* @param {string} params.salt - salt string\n* @param {float}  [params.time=1] - the number of iterations\n* @param {float}  [params.mem=1024] - used memory, in KiB\n* @param {float}  [params.hashLen=24] - desired hash length\n* @param {float}  [params.parallelism=1] - desired parallelism (will be computed in parallel only for PNaCl)\n* @param {number} [params.type=argon2.types.Argon2d] - hash type: argon2.ArgonType.Argon2d, .Argon2i, .Argon2id or .Argon2u\n* @param {string} [params.distPath=.] - asm.js script location, without trailing slash\n*\n* @return Promise\n*\n* @example\n*  argon2.hash({ pass: 'password', salt: 'somesalt' })\n*      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n*      .catch(e => console.error(e.message, e.code))\n*/\nfunction argon2(args) {\n  if (Module._argon2_hash) {\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(calcHash(args));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  return new Promise((resolve, reject) => {\n    Module.onRuntimeInitialized = function () {\n      try {\n        resolve(calcHash(args));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    loadModule(Module);\n  }).catch(err => {\n    console.log(err);\n  });\n}\nfunction calcHash(arg) {\n  if (!Module._argon2_hash) {\n    throw new Error('Error: _argon2_hash not available');\n  }\n  var t_cost = arg && arg.time || 10;\n  var m_cost = arg && arg.mem || 1024;\n  var parallelism = arg && arg.parallelism || 1;\n  var pwd = allocateArray(arg && arg.pass || 'password');\n  var pwdlen = arg && arg.pass ? arg.pass.length : 8;\n  var salt = allocateArray(arg && arg.salt || 'somesalt');\n  var saltlen = arg && arg.salt ? arg.salt.length : 8;\n  var hash = Module.allocate(new Array(arg && arg.hashLen || 32), 'i8', Module.ALLOC_NORMAL);\n  var hashlen = arg && arg.hashLen || 32;\n  var encoded = Module.allocate(new Array(512), 'i8', Module.ALLOC_NORMAL);\n  var encodedlen = 512;\n  var argon2_type = arg && arg.type || 0;\n  var version = 0x13;\n  var err;\n  var out = false;\n  try {\n    var res = Module._argon2_hash(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen, hash, hashlen, encoded, encodedlen, argon2_type, version);\n  } catch (e) {\n    err = e;\n  }\n  var result;\n  if (res === 0 && !err) {\n    var hashStr = '';\n    var hashArr = new Uint8Array(hashlen);\n    for (var i = 0; i < hashlen; i++) {\n      var byte = Module.HEAP8[hash + i];\n      hashArr[i] = byte;\n      hashStr += ('0' + (0xFF & byte).toString(16)).slice(-2);\n    }\n    var encodedStr = Module.Pointer_stringify(encoded);\n    result = {\n      hash: hashArr,\n      hashHex: hashStr,\n      encoded: encodedStr\n    };\n  } else {\n    try {\n      if (!err) {\n        err = Module.Pointer_stringify(Module._argon2_error_message(res));\n      }\n    } catch (e) {}\n    result = {\n      message: err,\n      code: res\n    };\n  }\n  try {\n    Module._free(pwd);\n    Module._free(salt);\n    Module._free(hash);\n    Module._free(encoded);\n  } catch (e) {}\n  if (err) {\n    throw result;\n  } else {\n    return result;\n  }\n}\nfunction allocateArray(strOrArr) {\n  var arr = strOrArr instanceof Uint8Array || strOrArr instanceof Array ? strOrArr : Module.intArrayFromString(strOrArr);\n  return Module.allocate(arr, 'i8', Module.ALLOC_NORMAL);\n}\nmodule.exports = {\n  hash: argon2,\n  types: {\n    Argon2d: 0,\n    Argon2i: 1,\n    Argon2id: 2,\n    Argon2u: 10\n  }\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}