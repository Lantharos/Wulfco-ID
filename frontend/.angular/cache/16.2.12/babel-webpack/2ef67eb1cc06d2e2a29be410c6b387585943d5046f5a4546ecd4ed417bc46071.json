{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport CryptoJSW from '@originjs/crypto-js-wasm';\nconst serverPublicKey = '-----BEGIN PUBLIC KEY-----\\n' + 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/nFSX024G7R7xUrWl6Y\\n' + 'gJ8koN5/WAiYVI0zEyD8iv81yZmCnx3maEzVkz4ZWUUvOtnAVzMXYTBls7yDENpf\\n' + 'ATDW3xmiLVOzy0Obld/BQnuTF+I7+5frWwi9FLlgNnYLsXygVjSYNhMwg0PU0Cip\\n' + 'qQy+Vy+TAnUeyc56WTwNAPQs5AP/+/3NZIGM39AACUYvvU186jBcWamZBMhxjiN5\\n' + 'gxR1clgR73V0NLx43Yi7TjWvp5GKapwHi3D2GerTbzMkTtJEf3G6AuEem/S2wOVt\\n' + '+KO7zR/avzTecOemBW7iKx3gWUFdamrXfR+qX+iCpfNAJYN6Pa5AExJv/tGqEJdU\\n' + 'YQIDAQAB\\n' + '-----END PUBLIC KEY-----\\n';\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      yield CryptoJSW.loadAllWasm();\n      const symmetricKey = CryptoJSW.lib.WordArray.random(128 / 8);\n      const iv = CryptoJSW.lib.WordArray.random(128 / 8);\n      const symmetricKeyHex = symmetricKey.toString(CryptoJSW.enc.Hex);\n      const encryptedData = CryptoJSW.AES.encrypt(data, symmetricKey, {\n        mode: CryptoJSW.mode.CBC,\n        iv: iv\n      }).toString();\n      const encryptedSymmetricKey = CryptoJSW.RSA.encrypt(symmetricKeyHex, {\n        key: serverPublicKey,\n        isPublicKey: true,\n        encryptPadding: \"OAEP\",\n        hashAlgo: \"sha256\"\n      }).toString();\n      const b64encoded = btoa(encryptedSymmetricKey);\n      return {\n        encryptedData,\n        encryptedSymmetricKey: b64encoded,\n        iv: btoa(iv.toString())\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}