{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport CryptoJSW from '@originjs/crypto-js-wasm';\nconst serverPublicKey = '-----BEGIN PUBLIC KEY-----\\n' + 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/nFSX024G7R7xUrWl6Y\\n' + 'gJ8koN5/WAiYVI0zEyD8iv81yZmCnx3maEzVkz4ZWUUvOtnAVzMXYTBls7yDENpf\\n' + 'ATDW3xmiLVOzy0Obld/BQnuTF+I7+5frWwi9FLlgNnYLsXygVjSYNhMwg0PU0Cip\\n' + 'qQy+Vy+TAnUeyc56WTwNAPQs5AP/+/3NZIGM39AACUYvvU186jBcWamZBMhxjiN5\\n' + 'gxR1clgR73V0NLx43Yi7TjWvp5GKapwHi3D2GerTbzMkTtJEf3G6AuEem/S2wOVt\\n' + '+KO7zR/avzTecOemBW7iKx3gWUFdamrXfR+qX+iCpfNAJYN6Pa5AExJv/tGqEJdU\\n' + 'YQIDAQAB\\n' + '-----END PUBLIC KEY-----\\n';\nfunction wordToByteArray(wordArray) {\n  var byteArray = [];\n  for (var i = 0; i < wordArray.sigBytes; ++i) {\n    var word = wordArray[i];\n    for (var j = 3; j >= 0; --j) {\n      byteArray.push(word >> 8 * j & 0xFF);\n    }\n  }\n  return byteArray;\n}\nfunction byteArrayToString(byteArray) {\n  var str = \"\";\n  for (var i = 0; i < byteArray.length; ++i) {\n    str += escape(String.fromCharCode(byteArray[i]));\n  }\n  return str;\n}\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string, iv: number[]}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      const symmetricKey = CryptoJSW.lib.WordArray.random(128 / 8);\n      const iv = CryptoJSW.lib.WordArray.random(128 / 8);\n      console.log(symmetricKey);\n      console.log(iv);\n      const encryptedData = CryptoJSW.AES.encrypt(btoa(data), symmetricKey, {\n        iv: iv\n      }).ciphertext;\n      const bytearray = wordToByteArray(encryptedData);\n      console.log(bytearray);\n      // @ts-ignore\n      const decryptedData = CryptoJSW.AES.decrypt(encryptedData, {\n        words: symmetricKey.words,\n        sigBytes: 16\n      }, {\n        iv: {\n          words: iv.words,\n          sigBytes: 16\n        },\n        format: CryptoJSW.format.OpenSSL\n      });\n      const encryptedSymmetricKey = CryptoJSW.RSA.encrypt(JSON.stringify({\n        symmetricKeyWords: symmetricKey.words\n      }), {\n        key: serverPublicKey,\n        isPublicKey: true,\n        encryptPadding: \"OAEP\",\n        hashAlgo: \"sha256\"\n      }).toString();\n      const b64encoded = btoa(encryptedSymmetricKey);\n      return {\n        encryptedData: btoa(convert_word_array_to_uint8Array(encryptedData).toString()),\n        encryptedSymmetricKey: b64encoded,\n        iv: iv.words\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}