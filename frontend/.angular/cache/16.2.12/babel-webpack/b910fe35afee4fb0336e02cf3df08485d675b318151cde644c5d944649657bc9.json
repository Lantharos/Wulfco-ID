{"ast":null,"code":"import _asyncToGenerator from \"D:/Wulfco/Wulfco ID 2/frontend-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst serverPublicKey = '-----BEGIN PUBLIC KEY-----\\n' + 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/nFSX024G7R7xUrWl6Y\\n' + 'gJ8koN5/WAiYVI0zEyD8iv81yZmCnx3maEzVkz4ZWUUvOtnAVzMXYTBls7yDENpf\\n' + 'ATDW3xmiLVOzy0Obld/BQnuTF+I7+5frWwi9FLlgNnYLsXygVjSYNhMwg0PU0Cip\\n' + 'qQy+Vy+TAnUeyc56WTwNAPQs5AP/+/3NZIGM39AACUYvvU186jBcWamZBMhxjiN5\\n' + 'gxR1clgR73V0NLx43Yi7TjWvp5GKapwHi3D2GerTbzMkTtJEf3G6AuEem/S2wOVt\\n' + '+KO7zR/avzTecOemBW7iKx3gWUFdamrXfR+qX+iCpfNAJYN6Pa5AExJv/tGqEJdU\\n' + 'YQIDAQAB\\n' + '-----END PUBLIC KEY-----\\n';\nclass KeyManagment {\n  arrayBufferToBase64String(arrayBuffer) {\n    var byteArray = new Uint8Array(arrayBuffer);\n    var byteString = '';\n    for (var i = 0; i < byteArray.byteLength; i++) {\n      byteString += String.fromCharCode(byteArray[i]);\n    }\n    return btoa(byteString);\n  }\n  base64StringToArrayBuffer(b64str) {\n    var byteStr = atob(b64str);\n    var bytes = new Uint8Array(byteStr.length);\n    for (var i = 0; i < byteStr.length; i++) {\n      bytes[i] = byteStr.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n  textToArrayBuffer(str) {\n    var buf = unescape(encodeURIComponent(str)); // 2 bytes for each char\n    var bufView = new Uint8Array(buf.length);\n    for (var i = 0; i < buf.length; i++) {\n      bufView[i] = buf.charCodeAt(i);\n    }\n    return bufView;\n  }\n  convertPemToBinary(pem) {\n    var lines = pem.split('\\n');\n    var encoded = '';\n    for (var i = 0; i < lines.length; i++) {\n      if (lines[i].trim().length > 0 && lines[i].indexOf('-BEGIN RSA PRIVATE KEY-') < 0 && lines[i].indexOf('-BEGIN RSA PUBLIC KEY-') < 0 && lines[i].indexOf('-BEGIN PUBLIC KEY-') < 0 && lines[i].indexOf('-END PUBLIC KEY-') < 0 && lines[i].indexOf('-END RSA PRIVATE KEY-') < 0 && lines[i].indexOf('-END RSA PUBLIC KEY-') < 0) {\n        encoded += lines[i].trim();\n      }\n    }\n    return this.base64StringToArrayBuffer(encoded);\n  }\n  importPublicKey(pemKey) {\n    return new Promise(function (resolve) {\n      const KeyManager = new KeyManagment();\n      var importer = crypto.subtle.importKey(\"spki\", KeyManager.convertPemToBinary(pemKey), {\n        name: \"RSA-OAEP\",\n        hash: \"SHA-256\"\n      }, false, [\"encrypt\"]);\n      importer.then(function (key) {\n        resolve(key);\n      });\n    });\n  }\n}\nexport class AuthCrypto {\n  /*\n  * This function encrypts given data using AES and then encrypts the symmetric key using the server's public key\n  * @input data: string\n  * @output {encryptedData: string, encryptedSymmetricKey: string, iv: number[]}\n   */\n  SimpleEncrypt(data) {\n    return _asyncToGenerator(function* () {\n      const KeyManager = new KeyManagment();\n      const symmetricKey = yield crypto.subtle.generateKey({\n        name: \"AES-CBC\",\n        length: 256\n      },\n      // 256-bit key\n      true,\n      // extractable\n      [\"encrypt\", \"decrypt\"] // key usages\n      );\n\n      const iv = crypto.getRandomValues(new Uint8Array(16)); // 16 bytes for AES-CBC\n      const encoder = new TextEncoder(); // For text conversions\n      const cipherText = yield crypto.subtle.encrypt({\n        name: \"AES-CBC\",\n        iv\n      }, symmetricKey, encoder.encode(JSON.stringify({\n        string: data\n      })));\n      // Key Encryption (RSA)\n      const importedPublicKey = yield KeyManager.importPublicKey(serverPublicKey);\n      const encryptedKey = yield crypto.subtle.encrypt({\n        name: \"RSA-OAEP\"\n      }, importedPublicKey, new Uint8Array(yield crypto.subtle.exportKey(\"raw\", symmetricKey)) // Export symmetric key as raw bytes\n      );\n      // Encode for transmission\n      const encryptedDataBase64 = btoa(String.fromCharCode(...new Uint8Array(cipherText)));\n      const encryptedKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(encryptedKey)));\n      const ivBase64 = btoa(String.fromCharCode(...new Uint8Array(iv)));\n      return {\n        encryptedData: encryptedDataBase64,\n        encryptedSymmetricKey: encryptedKeyBase64,\n        iv: ivBase64\n      };\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}